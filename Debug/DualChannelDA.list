
DualChannelDA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006600  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006814  08006814  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006814  08006814  00016814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800681c  0800681c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800681c  0800681c  0001681c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006820  08006820  00016820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  10000000  08006824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002244  20000000  20000000  00030000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  10000070  10000070  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014689  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000261c  00000000  00000000  00034729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00036d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00037bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283f8  00000000  00000000  00038930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108ef  00000000  00000000  00060d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd9a7  00000000  00000000  00071617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016efbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f9c  00000000  00000000  0016f014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000000 	.word	0x20000000
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006778 	.word	0x08006778

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000004 	.word	0x20000004
 80001cc:	08006778 	.word	0x08006778

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800057c:	f3bf 8f4f 	dsb	sy
}
 8000580:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <__NVIC_SystemReset+0x24>)
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800058a:	4904      	ldr	r1, [pc, #16]	; (800059c <__NVIC_SystemReset+0x24>)
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <__NVIC_SystemReset+0x28>)
 800058e:	4313      	orrs	r3, r2
 8000590:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000592:	f3bf 8f4f 	dsb	sy
}
 8000596:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <__NVIC_SystemReset+0x20>
 800059c:	e000ed00 	.word	0xe000ed00
 80005a0:	05fa0004 	.word	0x05fa0004

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fc95 	bl	8000ed6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f824 	bl	80005f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005b0:	f000 f884 	bl	80006bc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 f9dc 	bl	8000970 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b8:	f000 f98c 	bl	80008d4 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80005bc:	f000 f9ba 	bl	8000934 <MX_DMA_Init>
  MX_ADC2_Init();
 80005c0:	f000 f924 	bl	800080c <MX_ADC2_Init>
  MX_ADC1_Init();
 80005c4:	f000 f8a6 	bl	8000714 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 80005c8:	217f      	movs	r1, #127	; 0x7f
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <main+0x48>)
 80005cc:	f001 ffc2 	bl	8002554 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2,ADC_SINGLE_ENDED);
 80005d0:	217f      	movs	r1, #127	; 0x7f
 80005d2:	4807      	ldr	r0, [pc, #28]	; (80005f0 <main+0x4c>)
 80005d4:	f001 ffbe 	bl	8002554 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc2);
 80005d8:	4805      	ldr	r0, [pc, #20]	; (80005f0 <main+0x4c>)
 80005da:	f001 f86b 	bl	80016b4 <HAL_ADC_Start>
  HAL_ADCEx_MultiModeStart_DMA(&hadc1,(uint32_t *)adc_buf, ADC_BUF_LEN);
 80005de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005e2:	4904      	ldr	r1, [pc, #16]	; (80005f4 <main+0x50>)
 80005e4:	4801      	ldr	r0, [pc, #4]	; (80005ec <main+0x48>)
 80005e6:	f002 f815 	bl	8002614 <HAL_ADCEx_MultiModeStart_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <main+0x46>
 80005ec:	200000fc 	.word	0x200000fc
 80005f0:	2000002c 	.word	0x2000002c
 80005f4:	200001ac 	.word	0x200001ac

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	; 0x58
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2244      	movs	r2, #68	; 0x44
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f005 fc6c 	bl	8005ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800061e:	f002 ff7b 	bl	8003518 <HAL_PWREx_ControlVoltageScaling>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000628:	f000 fa68 	bl	8000afc <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800062c:	f002 ff56 	bl	80034dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000630:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <SystemClock_Config+0xc0>)
 8000632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000636:	4a20      	ldr	r2, [pc, #128]	; (80006b8 <SystemClock_Config+0xc0>)
 8000638:	f023 0318 	bic.w	r3, r3, #24
 800063c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000640:	2314      	movs	r3, #20
 8000642:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000650:	2360      	movs	r3, #96	; 0x60
 8000652:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000658:	2301      	movs	r3, #1
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800065c:	2301      	movs	r3, #1
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000660:	2328      	movs	r3, #40	; 0x28
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4618      	mov	r0, r3
 8000676:	f002 ffa5 	bl	80035c4 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000680:	f000 fa3c 	bl	8000afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2303      	movs	r3, #3
 800068a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	2104      	movs	r1, #4
 800069c:	4618      	mov	r0, r3
 800069e:	f003 fb6b 	bl	8003d78 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006a8:	f000 fa28 	bl	8000afc <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006ac:	f004 f872 	bl	8004794 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b0:	bf00      	nop
 80006b2:	3758      	adds	r7, #88	; 0x58
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000

080006bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b0a2      	sub	sp, #136	; 0x88
 80006c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2288      	movs	r2, #136	; 0x88
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f005 fc0b 	bl	8005ee4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006d2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006d8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006da:	2301      	movs	r3, #1
 80006dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80006e2:	2310      	movs	r3, #16
 80006e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006e6:	2307      	movs	r3, #7
 80006e8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006f6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fd60 	bl	80041c0 <HAL_RCCEx_PeriphCLKConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000706:	f000 f9f9 	bl	8000afc <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3788      	adds	r7, #136	; 0x88
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
 8000734:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000736:	4b32      	ldr	r3, [pc, #200]	; (8000800 <MX_ADC1_Init+0xec>)
 8000738:	4a32      	ldr	r2, [pc, #200]	; (8000804 <MX_ADC1_Init+0xf0>)
 800073a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800073c:	4b30      	ldr	r3, [pc, #192]	; (8000800 <MX_ADC1_Init+0xec>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000742:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <MX_ADC1_Init+0xec>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <MX_ADC1_Init+0xec>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074e:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <MX_ADC1_Init+0xec>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000754:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <MX_ADC1_Init+0xec>)
 8000756:	2204      	movs	r2, #4
 8000758:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800075a:	4b29      	ldr	r3, [pc, #164]	; (8000800 <MX_ADC1_Init+0xec>)
 800075c:	2200      	movs	r2, #0
 800075e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000760:	4b27      	ldr	r3, [pc, #156]	; (8000800 <MX_ADC1_Init+0xec>)
 8000762:	2201      	movs	r2, #1
 8000764:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_ADC1_Init+0xec>)
 8000768:	2201      	movs	r2, #1
 800076a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <MX_ADC1_Init+0xec>)
 800076e:	2200      	movs	r2, #0
 8000770:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_ADC1_Init+0xec>)
 8000776:	2200      	movs	r2, #0
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_ADC1_Init+0xec>)
 800077c:	2200      	movs	r2, #0
 800077e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_ADC1_Init+0xec>)
 8000782:	2201      	movs	r2, #1
 8000784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_ADC1_Init+0xec>)
 800078a:	2200      	movs	r2, #0
 800078c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_ADC1_Init+0xec>)
 8000790:	2200      	movs	r2, #0
 8000792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000796:	481a      	ldr	r0, [pc, #104]	; (8000800 <MX_ADC1_Init+0xec>)
 8000798:	f000 fe36 	bl	8001408 <HAL_ADC_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007a2:	f000 f9ab 	bl	8000afc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80007a6:	2306      	movs	r3, #6
 80007a8:	61fb      	str	r3, [r7, #28]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_32_10_BITS;
 80007aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007ae:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	4811      	ldr	r0, [pc, #68]	; (8000800 <MX_ADC1_Init+0xec>)
 80007bc:	f002 f894 	bl	80028e8 <HAL_ADCEx_MultiModeConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80007c6:	f000 f999 	bl	8000afc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_ADC1_Init+0xf4>)
 80007cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ce:	2306      	movs	r3, #6
 80007d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007d6:	237f      	movs	r3, #127	; 0x7f
 80007d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007da:	2304      	movs	r3, #4
 80007dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <MX_ADC1_Init+0xec>)
 80007e8:	f001 f828 	bl	800183c <HAL_ADC_ConfigChannel>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80007f2:	f000 f983 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	; 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200000fc 	.word	0x200000fc
 8000804:	50040000 	.word	0x50040000
 8000808:	14f00020 	.word	0x14f00020

0800080c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
 8000820:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <MX_ADC2_Init+0xbc>)
 8000824:	4a29      	ldr	r2, [pc, #164]	; (80008cc <MX_ADC2_Init+0xc0>)
 8000826:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000828:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_ADC2_Init+0xbc>)
 800082a:	2200      	movs	r2, #0
 800082c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800082e:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <MX_ADC2_Init+0xbc>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000834:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <MX_ADC2_Init+0xbc>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_ADC2_Init+0xbc>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_ADC2_Init+0xbc>)
 8000842:	2204      	movs	r2, #4
 8000844:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_ADC2_Init+0xbc>)
 8000848:	2200      	movs	r2, #0
 800084a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_ADC2_Init+0xbc>)
 800084e:	2200      	movs	r2, #0
 8000850:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_ADC2_Init+0xbc>)
 8000854:	2201      	movs	r2, #1
 8000856:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_ADC2_Init+0xbc>)
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_ADC2_Init+0xbc>)
 8000862:	2200      	movs	r2, #0
 8000864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_ADC2_Init+0xbc>)
 800086a:	2200      	movs	r2, #0
 800086c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc2.Init.OversamplingMode = DISABLE;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_ADC2_Init+0xbc>)
 8000870:	2200      	movs	r2, #0
 8000872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_ADC2_Init+0xbc>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_DR_RDATA;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_ADC2_Init+0xbc>)
 800087e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000884:	4810      	ldr	r0, [pc, #64]	; (80008c8 <MX_ADC2_Init+0xbc>)
 8000886:	f000 fdbf 	bl	8001408 <HAL_ADC_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000890:	f000 f934 	bl	8000afc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_ADC2_Init+0xc4>)
 8000896:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000898:	2306      	movs	r3, #6
 800089a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008a0:	237f      	movs	r3, #127	; 0x7f
 80008a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008a4:	2304      	movs	r3, #4
 80008a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_ADC2_Init+0xbc>)
 80008b2:	f000 ffc3 	bl	800183c <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80008bc:	f000 f91e 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000002c 	.word	0x2000002c
 80008cc:	50040100 	.word	0x50040100
 80008d0:	04300002 	.word	0x04300002

080008d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008da:	4a15      	ldr	r2, [pc, #84]	; (8000930 <MX_USART2_UART_Init+0x5c>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USART2_UART_Init+0x58>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USART2_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USART2_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_USART2_UART_Init+0x58>)
 8000918:	f004 f91e 	bl	8004b58 <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000922:	f000 f8eb 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200021ac 	.word	0x200021ac
 8000930:	40004400 	.word	0x40004400

08000934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_DMA_Init+0x38>)
 800093c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <MX_DMA_Init+0x38>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6493      	str	r3, [r2, #72]	; 0x48
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_DMA_Init+0x38>)
 8000948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	200b      	movs	r0, #11
 8000958:	f002 f951 	bl	8002bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800095c:	200b      	movs	r0, #11
 800095e:	f002 f96a 	bl	8002c36 <HAL_NVIC_EnableIRQ>

}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <MX_GPIO_Init+0xc4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a2a      	ldr	r2, [pc, #168]	; (8000a34 <MX_GPIO_Init+0xc4>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <MX_GPIO_Init+0xc4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <MX_GPIO_Init+0xc4>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a24      	ldr	r2, [pc, #144]	; (8000a34 <MX_GPIO_Init+0xc4>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_GPIO_Init+0xc4>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_GPIO_Init+0xc4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a1e      	ldr	r2, [pc, #120]	; (8000a34 <MX_GPIO_Init+0xc4>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_GPIO_Init+0xc4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_GPIO_Init+0xc4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a18      	ldr	r2, [pc, #96]	; (8000a34 <MX_GPIO_Init+0xc4>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_GPIO_Init+0xc4>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2120      	movs	r1, #32
 80009ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ee:	f002 fd5d 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B_Pin */
  GPIO_InitStruct.Pin = B_Pin;
 80009f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	480b      	ldr	r0, [pc, #44]	; (8000a38 <MX_GPIO_Init+0xc8>)
 8000a0a:	f002 fba5 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a0e:	2320      	movs	r3, #32
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f002 fb96 	bl	8003158 <HAL_GPIO_Init>

}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40021000 	.word	0x40021000
 8000a38:	48000800 	.word	0x48000800

08000a3c <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2120      	movs	r1, #32
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4c:	f002 fd2e 	bl	80034ac <HAL_GPIO_WritePin>

	HAL_UART_Receive(&huart2, Rx, sizeof(Rx), 10);
 8000a50:	230a      	movs	r3, #10
 8000a52:	2201      	movs	r2, #1
 8000a54:	4903      	ldr	r1, [pc, #12]	; (8000a64 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000a56:	4804      	ldr	r0, [pc, #16]	; (8000a68 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000a58:	f004 f960 	bl	8004d1c <HAL_UART_Receive>




}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200000f8 	.word	0x200000f8
 8000a68:	200021ac 	.word	0x200021ac

08000a6c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0b8      	sub	sp, #224	; 0xe0
 8000a70:	af02      	add	r7, sp, #8
 8000a72:	6078      	str	r0, [r7, #4]

	HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 8000a74:	481d      	ldr	r0, [pc, #116]	; (8000aec <HAL_ADC_ConvCpltCallback+0x80>)
 8000a76:	f001 fe6f 	bl	8002758 <HAL_ADCEx_MultiModeStop_DMA>

	int i = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	char temp_buf[200]; // Temporary buffer for formatting

	while ( i < ADC_BUF_LEN  ) {
 8000a80:	e02d      	b.n	8000ade <HAL_ADC_ConvCpltCallback+0x72>
		uint16_t reading_1 = adc_buf[i] & 0x0000FFFF;
 8000a82:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <HAL_ADC_ConvCpltCallback+0x84>)
 8000a84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8c:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
		uint16_t reading_2 = adc_buf[i] >> 16;
 8000a90:	4a17      	ldr	r2, [pc, #92]	; (8000af0 <HAL_ADC_ConvCpltCallback+0x84>)
 8000a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9a:	0c1b      	lsrs	r3, r3, #16
 8000a9c:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0

		snprintf(temp_buf, sizeof(temp_buf), "%d\t%d\r\n", reading_1, reading_2);
 8000aa0:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 8000aa4:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8000aa8:	f107 0008 	add.w	r0, r7, #8
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <HAL_ADC_ConvCpltCallback+0x88>)
 8000ab2:	21c8      	movs	r1, #200	; 0xc8
 8000ab4:	f005 fa1e 	bl	8005ef4 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)temp_buf, strlen(temp_buf), HAL_MAX_DELAY);
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fb87 	bl	80001d0 <strlen>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	f107 0108 	add.w	r1, r7, #8
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	480a      	ldr	r0, [pc, #40]	; (8000af8 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000ad0:	f004 f890 	bl	8004bf4 <HAL_UART_Transmit>

		i++;
 8000ad4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000ad8:	3301      	adds	r3, #1
 8000ada:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	while ( i < ADC_BUF_LEN  ) {
 8000ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ae6:	dbcc      	blt.n	8000a82 <HAL_ADC_ConvCpltCallback+0x16>
	}



	NVIC_SystemReset();
 8000ae8:	f7ff fd46 	bl	8000578 <__NVIC_SystemReset>
 8000aec:	200000fc 	.word	0x200000fc
 8000af0:	200001ac 	.word	0x200001ac
 8000af4:	08006790 	.word	0x08006790
 8000af8:	200021ac 	.word	0x200021ac

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_MspInit+0x44>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b12:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <HAL_MspInit+0x44>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6613      	str	r3, [r2, #96]	; 0x60
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_MspInit+0x44>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_MspInit+0x44>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x44>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6593      	str	r3, [r2, #88]	; 0x58
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x44>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	; 0x30
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a49      	ldr	r2, [pc, #292]	; (8000c94 <HAL_ADC_MspInit+0x144>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d159      	bne.n	8000c26 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000b72:	4b49      	ldr	r3, [pc, #292]	; (8000c98 <HAL_ADC_MspInit+0x148>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3301      	adds	r3, #1
 8000b78:	4a47      	ldr	r2, [pc, #284]	; (8000c98 <HAL_ADC_MspInit+0x148>)
 8000b7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000b7c:	4b46      	ldr	r3, [pc, #280]	; (8000c98 <HAL_ADC_MspInit+0x148>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d10b      	bne.n	8000b9c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000b84:	4b45      	ldr	r3, [pc, #276]	; (8000c9c <HAL_ADC_MspInit+0x14c>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b88:	4a44      	ldr	r2, [pc, #272]	; (8000c9c <HAL_ADC_MspInit+0x14c>)
 8000b8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b90:	4b42      	ldr	r3, [pc, #264]	; (8000c9c <HAL_ADC_MspInit+0x14c>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <HAL_ADC_MspInit+0x14c>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba0:	4a3e      	ldr	r2, [pc, #248]	; (8000c9c <HAL_ADC_MspInit+0x14c>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba8:	4b3c      	ldr	r3, [pc, #240]	; (8000c9c <HAL_ADC_MspInit+0x14c>)
 8000baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bb8:	230b      	movs	r3, #11
 8000bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f002 fac5 	bl	8003158 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bce:	4b34      	ldr	r3, [pc, #208]	; (8000ca0 <HAL_ADC_MspInit+0x150>)
 8000bd0:	4a34      	ldr	r2, [pc, #208]	; (8000ca4 <HAL_ADC_MspInit+0x154>)
 8000bd2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000bd4:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <HAL_ADC_MspInit+0x150>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bda:	4b31      	ldr	r3, [pc, #196]	; (8000ca0 <HAL_ADC_MspInit+0x150>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be0:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <HAL_ADC_MspInit+0x150>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000be6:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <HAL_ADC_MspInit+0x150>)
 8000be8:	2280      	movs	r2, #128	; 0x80
 8000bea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bec:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <HAL_ADC_MspInit+0x150>)
 8000bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bf4:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <HAL_ADC_MspInit+0x150>)
 8000bf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bfa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bfc:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <HAL_ADC_MspInit+0x150>)
 8000bfe:	2220      	movs	r2, #32
 8000c00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c02:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <HAL_ADC_MspInit+0x150>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c08:	4825      	ldr	r0, [pc, #148]	; (8000ca0 <HAL_ADC_MspInit+0x150>)
 8000c0a:	f002 f82f 	bl	8002c6c <HAL_DMA_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000c14:	f7ff ff72 	bl	8000afc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a21      	ldr	r2, [pc, #132]	; (8000ca0 <HAL_ADC_MspInit+0x150>)
 8000c1c:	651a      	str	r2, [r3, #80]	; 0x50
 8000c1e:	4a20      	ldr	r2, [pc, #128]	; (8000ca0 <HAL_ADC_MspInit+0x150>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c24:	e031      	b.n	8000c8a <HAL_ADC_MspInit+0x13a>
  else if(hadc->Instance==ADC2)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ca8 <HAL_ADC_MspInit+0x158>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d12c      	bne.n	8000c8a <HAL_ADC_MspInit+0x13a>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_ADC_MspInit+0x148>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <HAL_ADC_MspInit+0x148>)
 8000c38:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <HAL_ADC_MspInit+0x148>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d10b      	bne.n	8000c5a <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_ADC_MspInit+0x14c>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <HAL_ADC_MspInit+0x14c>)
 8000c48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <HAL_ADC_MspInit+0x14c>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_ADC_MspInit+0x14c>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <HAL_ADC_MspInit+0x14c>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <HAL_ADC_MspInit+0x14c>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c72:	2301      	movs	r3, #1
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c76:	230b      	movs	r3, #11
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <HAL_ADC_MspInit+0x15c>)
 8000c86:	f002 fa67 	bl	8003158 <HAL_GPIO_Init>
}
 8000c8a:	bf00      	nop
 8000c8c:	3730      	adds	r7, #48	; 0x30
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	50040000 	.word	0x50040000
 8000c98:	2000001c 	.word	0x2000001c
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	20000164 	.word	0x20000164
 8000ca4:	40020008 	.word	0x40020008
 8000ca8:	50040100 	.word	0x50040100
 8000cac:	48000800 	.word	0x48000800

08000cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0ac      	sub	sp, #176	; 0xb0
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2288      	movs	r2, #136	; 0x88
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f005 f907 	bl	8005ee4 <memset>
  if(huart->Instance==USART2)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a25      	ldr	r2, [pc, #148]	; (8000d70 <HAL_UART_MspInit+0xc0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d143      	bne.n	8000d68 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4618      	mov	r0, r3
 8000cee:	f003 fa67 	bl	80041c0 <HAL_RCCEx_PeriphCLKConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cf8:	f7ff ff00 	bl	8000afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <HAL_UART_MspInit+0xc4>)
 8000cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d00:	4a1c      	ldr	r2, [pc, #112]	; (8000d74 <HAL_UART_MspInit+0xc4>)
 8000d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d06:	6593      	str	r3, [r2, #88]	; 0x58
 8000d08:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <HAL_UART_MspInit+0xc4>)
 8000d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_UART_MspInit+0xc4>)
 8000d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d18:	4a16      	ldr	r2, [pc, #88]	; (8000d74 <HAL_UART_MspInit+0xc4>)
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_UART_MspInit+0xc4>)
 8000d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d44:	2307      	movs	r3, #7
 8000d46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d54:	f002 fa00 	bl	8003158 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2026      	movs	r0, #38	; 0x26
 8000d5e:	f001 ff4e 	bl	8002bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d62:	2026      	movs	r0, #38	; 0x26
 8000d64:	f001 ff67 	bl	8002c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d68:	bf00      	nop
 8000d6a:	37b0      	adds	r7, #176	; 0xb0
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40004400 	.word	0x40004400
 8000d74:	40021000 	.word	0x40021000

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 f8dc 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <DMA1_Channel1_IRQHandler+0x10>)
 8000dd2:	f002 f8e2 	bl	8002f9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000164 	.word	0x20000164

08000de0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <USART2_IRQHandler+0x10>)
 8000de6:	f004 f86b 	bl	8004ec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200021ac 	.word	0x200021ac

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f005 f834 	bl	8005e90 <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20018000 	.word	0x20018000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	20000020 	.word	0x20000020
 8000e5c:	10000070 	.word	0x10000070

08000e60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e88:	f7ff ffea 	bl	8000e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e8e:	490d      	ldr	r1, [pc, #52]	; (8000ec4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <LoopForever+0xe>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea4:	4c0a      	ldr	r4, [pc, #40]	; (8000ed0 <LoopForever+0x16>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f004 fff3 	bl	8005e9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eb6:	f7ff fb75 	bl	80005a4 <main>

08000eba <LoopForever>:

LoopForever:
    b LoopForever
 8000eba:	e7fe      	b.n	8000eba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ebc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ec0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8000ec4:	10000070 	.word	0x10000070
  ldr r2, =_sidata
 8000ec8:	08006824 	.word	0x08006824
  ldr r2, =_sbss
 8000ecc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ed0:	20002244 	.word	0x20002244

08000ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_2_IRQHandler>

08000ed6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f001 fe81 	bl	8002be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f80e 	bl	8000f08 <HAL_InitTick>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d002      	beq.n	8000ef8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	71fb      	strb	r3, [r7, #7]
 8000ef6:	e001      	b.n	8000efc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef8:	f7ff fe06 	bl	8000b08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000efc:	79fb      	ldrb	r3, [r7, #7]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_InitTick+0x6c>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d023      	beq.n	8000f64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <HAL_InitTick+0x70>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_InitTick+0x6c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 fe8d 	bl	8002c52 <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10f      	bne.n	8000f5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d809      	bhi.n	8000f58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f001 fe57 	bl	8002bfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_InitTick+0x74>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e007      	b.n	8000f68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	e004      	b.n	8000f68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e001      	b.n	8000f68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	10000008 	.word	0x10000008
 8000f78:	10000000 	.word	0x10000000
 8000f7c:	10000004 	.word	0x10000004

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	10000008 	.word	0x10000008
 8000fa4:	20002230 	.word	0x20002230

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20002230 	.word	0x20002230

08000fc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3360      	adds	r3, #96	; 0x60
 800103a:	461a      	mov	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <LL_ADC_SetOffset+0x44>)
 800104a:	4013      	ands	r3, r2
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	430a      	orrs	r2, r1
 8001056:	4313      	orrs	r3, r2
 8001058:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001060:	bf00      	nop
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	03fff000 	.word	0x03fff000

08001070 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3360      	adds	r3, #96	; 0x60
 800107e:	461a      	mov	r2, r3
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	3360      	adds	r3, #96	; 0x60
 80010ac:	461a      	mov	r2, r3
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010c6:	bf00      	nop
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3330      	adds	r3, #48	; 0x30
 8001108:	461a      	mov	r2, r3
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	f003 030c 	and.w	r3, r3, #12
 8001114:	4413      	add	r3, r2
 8001116:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	f003 031f 	and.w	r3, r3, #31
 8001122:	211f      	movs	r1, #31
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	401a      	ands	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	0e9b      	lsrs	r3, r3, #26
 8001130:	f003 011f 	and.w	r1, r3, #31
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	431a      	orrs	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001144:	bf00      	nop
 8001146:	371c      	adds	r7, #28
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3314      	adds	r3, #20
 8001160:	461a      	mov	r2, r3
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	0e5b      	lsrs	r3, r3, #25
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	4413      	add	r3, r2
 800116e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	0d1b      	lsrs	r3, r3, #20
 8001178:	f003 031f 	and.w	r3, r3, #31
 800117c:	2107      	movs	r1, #7
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	401a      	ands	r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	0d1b      	lsrs	r3, r3, #20
 800118a:	f003 031f 	and.w	r3, r3, #31
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	431a      	orrs	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800119a:	bf00      	nop
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011c0:	43db      	mvns	r3, r3
 80011c2:	401a      	ands	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 0318 	and.w	r3, r3, #24
 80011ca:	4908      	ldr	r1, [pc, #32]	; (80011ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80011cc:	40d9      	lsrs	r1, r3
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	400b      	ands	r3, r1
 80011d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011d6:	431a      	orrs	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	0007ffff 	.word	0x0007ffff

080011f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f003 031f 	and.w	r3, r3, #31
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800121c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6093      	str	r3, [r2, #8]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001244:	d101      	bne.n	800124a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800126c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001290:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001294:	d101      	bne.n	800129a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012bc:	f043 0201 	orr.w	r2, r3, #1
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012e4:	f043 0202 	orr.w	r2, r3, #2
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b01      	cmp	r3, #1
 800130a:	d101      	bne.n	8001310 <LL_ADC_IsEnabled+0x18>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <LL_ADC_IsEnabled+0x1a>
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b02      	cmp	r3, #2
 8001330:	d101      	bne.n	8001336 <LL_ADC_IsDisableOngoing+0x18>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <LL_ADC_IsDisableOngoing+0x1a>
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001354:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001358:	f043 0204 	orr.w	r2, r3, #4
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800137c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001380:	f043 0210 	orr.w	r2, r3, #16
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d101      	bne.n	80013ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013ce:	f043 0220 	orr.w	r2, r3, #32
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d101      	bne.n	80013fa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e136      	b.n	8001690 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142c:	2b00      	cmp	r3, #0
 800142e:	d109      	bne.n	8001444 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fb8d 	bl	8000b50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fef1 	bl	8001230 <LL_ADC_IsDeepPowerDownEnabled>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d004      	beq.n	800145e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fed7 	bl	800120c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff0c 	bl	8001280 <LL_ADC_IsInternalRegulatorEnabled>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d115      	bne.n	800149a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fef0 	bl	8001258 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001478:	4b87      	ldr	r3, [pc, #540]	; (8001698 <HAL_ADC_Init+0x290>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	099b      	lsrs	r3, r3, #6
 800147e:	4a87      	ldr	r2, [pc, #540]	; (800169c <HAL_ADC_Init+0x294>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	099b      	lsrs	r3, r3, #6
 8001486:	3301      	adds	r3, #1
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800148c:	e002      	b.n	8001494 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	3b01      	subs	r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f9      	bne.n	800148e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff feee 	bl	8001280 <LL_ADC_IsInternalRegulatorEnabled>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10d      	bne.n	80014c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	f043 0210 	orr.w	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ba:	f043 0201 	orr.w	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff62 	bl	8001394 <LL_ADC_REG_IsConversionOngoing>
 80014d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f040 80cf 	bne.w	800167e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f040 80cb 	bne.w	800167e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014f0:	f043 0202 	orr.w	r2, r3, #2
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fefb 	bl	80012f8 <LL_ADC_IsEnabled>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d115      	bne.n	8001534 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001508:	4865      	ldr	r0, [pc, #404]	; (80016a0 <HAL_ADC_Init+0x298>)
 800150a:	f7ff fef5 	bl	80012f8 <LL_ADC_IsEnabled>
 800150e:	4604      	mov	r4, r0
 8001510:	4864      	ldr	r0, [pc, #400]	; (80016a4 <HAL_ADC_Init+0x29c>)
 8001512:	f7ff fef1 	bl	80012f8 <LL_ADC_IsEnabled>
 8001516:	4603      	mov	r3, r0
 8001518:	431c      	orrs	r4, r3
 800151a:	4863      	ldr	r0, [pc, #396]	; (80016a8 <HAL_ADC_Init+0x2a0>)
 800151c:	f7ff feec 	bl	80012f8 <LL_ADC_IsEnabled>
 8001520:	4603      	mov	r3, r0
 8001522:	4323      	orrs	r3, r4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d105      	bne.n	8001534 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	4619      	mov	r1, r3
 800152e:	485f      	ldr	r0, [pc, #380]	; (80016ac <HAL_ADC_Init+0x2a4>)
 8001530:	f7ff fd46 	bl	8000fc0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	7e5b      	ldrb	r3, [r3, #25]
 8001538:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800153e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001544:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800154a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001552:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d106      	bne.n	8001570 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	3b01      	subs	r3, #1
 8001568:	045b      	lsls	r3, r3, #17
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	2b00      	cmp	r3, #0
 8001576:	d009      	beq.n	800158c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <HAL_ADC_Init+0x2a8>)
 8001594:	4013      	ands	r3, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	69b9      	ldr	r1, [r7, #24]
 800159c:	430b      	orrs	r3, r1
 800159e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fef5 	bl	8001394 <LL_ADC_REG_IsConversionOngoing>
 80015aa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff16 	bl	80013e2 <LL_ADC_INJ_IsConversionOngoing>
 80015b6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d13d      	bne.n	800163a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d13a      	bne.n	800163a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015c8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015d0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015e0:	f023 0302 	bic.w	r3, r3, #2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	69b9      	ldr	r1, [r7, #24]
 80015ea:	430b      	orrs	r3, r1
 80015ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d118      	bne.n	800162a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001602:	f023 0304 	bic.w	r3, r3, #4
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800160e:	4311      	orrs	r1, r2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001614:	4311      	orrs	r1, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800161a:	430a      	orrs	r2, r1
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	611a      	str	r2, [r3, #16]
 8001628:	e007      	b.n	800163a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d10c      	bne.n	800165c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	f023 010f 	bic.w	r1, r3, #15
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	1e5a      	subs	r2, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	631a      	str	r2, [r3, #48]	; 0x30
 800165a:	e007      	b.n	800166c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 020f 	bic.w	r2, r2, #15
 800166a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	f023 0303 	bic.w	r3, r3, #3
 8001674:	f043 0201 	orr.w	r2, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	659a      	str	r2, [r3, #88]	; 0x58
 800167c:	e007      	b.n	800168e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	f043 0210 	orr.w	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800168e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3724      	adds	r7, #36	; 0x24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd90      	pop	{r4, r7, pc}
 8001698:	10000000 	.word	0x10000000
 800169c:	053e2d63 	.word	0x053e2d63
 80016a0:	50040000 	.word	0x50040000
 80016a4:	50040100 	.word	0x50040100
 80016a8:	50040200 	.word	0x50040200
 80016ac:	50040300 	.word	0x50040300
 80016b0:	fff0c007 	.word	0xfff0c007

080016b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016bc:	4857      	ldr	r0, [pc, #348]	; (800181c <HAL_ADC_Start+0x168>)
 80016be:	f7ff fd97 	bl	80011f0 <LL_ADC_GetMultimode>
 80016c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fe63 	bl	8001394 <LL_ADC_REG_IsConversionOngoing>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f040 809c 	bne.w	800180e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d101      	bne.n	80016e4 <HAL_ADC_Start+0x30>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e097      	b.n	8001814 <HAL_ADC_Start+0x160>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 fd51 	bl	8002194 <ADC_Enable>
 80016f2:	4603      	mov	r3, r0
 80016f4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f040 8083 	bne.w	8001804 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a42      	ldr	r2, [pc, #264]	; (8001820 <HAL_ADC_Start+0x16c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d002      	beq.n	8001722 <HAL_ADC_Start+0x6e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	e000      	b.n	8001724 <HAL_ADC_Start+0x70>
 8001722:	4b40      	ldr	r3, [pc, #256]	; (8001824 <HAL_ADC_Start+0x170>)
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	4293      	cmp	r3, r2
 800172a:	d002      	beq.n	8001732 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d105      	bne.n	800173e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800174a:	d106      	bne.n	800175a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001750:	f023 0206 	bic.w	r2, r3, #6
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	65da      	str	r2, [r3, #92]	; 0x5c
 8001758:	e002      	b.n	8001760 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	221c      	movs	r2, #28
 8001766:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a2a      	ldr	r2, [pc, #168]	; (8001820 <HAL_ADC_Start+0x16c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d002      	beq.n	8001780 <HAL_ADC_Start+0xcc>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	e000      	b.n	8001782 <HAL_ADC_Start+0xce>
 8001780:	4b28      	ldr	r3, [pc, #160]	; (8001824 <HAL_ADC_Start+0x170>)
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	4293      	cmp	r3, r2
 8001788:	d008      	beq.n	800179c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	2b05      	cmp	r3, #5
 8001794:	d002      	beq.n	800179c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b09      	cmp	r3, #9
 800179a:	d114      	bne.n	80017c6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fdc0 	bl	8001344 <LL_ADC_REG_StartConversion>
 80017c4:	e025      	b.n	8001812 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <HAL_ADC_Start+0x16c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d002      	beq.n	80017e2 <HAL_ADC_Start+0x12e>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	e000      	b.n	80017e4 <HAL_ADC_Start+0x130>
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_ADC_Start+0x170>)
 80017e4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00f      	beq.n	8001812 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	659a      	str	r2, [r3, #88]	; 0x58
 8001802:	e006      	b.n	8001812 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800180c:	e001      	b.n	8001812 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800180e:	2302      	movs	r3, #2
 8001810:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001812:	7dfb      	ldrb	r3, [r7, #23]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	50040300 	.word	0x50040300
 8001820:	50040100 	.word	0x50040100
 8001824:	50040000 	.word	0x50040000

08001828 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b0b6      	sub	sp, #216	; 0xd8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_ADC_ConfigChannel+0x22>
 800185a:	2302      	movs	r3, #2
 800185c:	e3c7      	b.n	8001fee <HAL_ADC_ConfigChannel+0x7b2>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fd92 	bl	8001394 <LL_ADC_REG_IsConversionOngoing>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	f040 83a8 	bne.w	8001fc8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b05      	cmp	r3, #5
 800187e:	d824      	bhi.n	80018ca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	3b02      	subs	r3, #2
 8001886:	2b03      	cmp	r3, #3
 8001888:	d81b      	bhi.n	80018c2 <HAL_ADC_ConfigChannel+0x86>
 800188a:	a201      	add	r2, pc, #4	; (adr r2, 8001890 <HAL_ADC_ConfigChannel+0x54>)
 800188c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001890:	080018a1 	.word	0x080018a1
 8001894:	080018a9 	.word	0x080018a9
 8001898:	080018b1 	.word	0x080018b1
 800189c:	080018b9 	.word	0x080018b9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	220c      	movs	r2, #12
 80018a4:	605a      	str	r2, [r3, #4]
          break;
 80018a6:	e011      	b.n	80018cc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2212      	movs	r2, #18
 80018ac:	605a      	str	r2, [r3, #4]
          break;
 80018ae:	e00d      	b.n	80018cc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2218      	movs	r2, #24
 80018b4:	605a      	str	r2, [r3, #4]
          break;
 80018b6:	e009      	b.n	80018cc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018be:	605a      	str	r2, [r3, #4]
          break;
 80018c0:	e004      	b.n	80018cc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2206      	movs	r2, #6
 80018c6:	605a      	str	r2, [r3, #4]
          break;
 80018c8:	e000      	b.n	80018cc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80018ca:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	f7ff fc0d 	bl	80010f8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fd56 	bl	8001394 <LL_ADC_REG_IsConversionOngoing>
 80018e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fd76 	bl	80013e2 <LL_ADC_INJ_IsConversionOngoing>
 80018f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 81a6 	bne.w	8001c50 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001904:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001908:	2b00      	cmp	r3, #0
 800190a:	f040 81a1 	bne.w	8001c50 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	6819      	ldr	r1, [r3, #0]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	461a      	mov	r2, r3
 800191c:	f7ff fc18 	bl	8001150 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	08db      	lsrs	r3, r3, #3
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	2b04      	cmp	r3, #4
 8001940:	d00a      	beq.n	8001958 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	6919      	ldr	r1, [r3, #16]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001952:	f7ff fb69 	bl	8001028 <LL_ADC_SetOffset>
 8001956:	e17b      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fb86 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10a      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x148>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fb7b 	bl	8001070 <LL_ADC_GetOffsetChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	0e9b      	lsrs	r3, r3, #26
 800197e:	f003 021f 	and.w	r2, r3, #31
 8001982:	e01e      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x186>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fb70 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001990:	4603      	mov	r3, r0
 8001992:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80019b2:	2320      	movs	r3, #32
 80019b4:	e004      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80019b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019ba:	fab3 f383 	clz	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d105      	bne.n	80019da <HAL_ADC_ConfigChannel+0x19e>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	0e9b      	lsrs	r3, r3, #26
 80019d4:	f003 031f 	and.w	r3, r3, #31
 80019d8:	e018      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x1d0>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019e6:	fa93 f3a3 	rbit	r3, r3
 80019ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80019fe:	2320      	movs	r3, #32
 8001a00:	e004      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001a02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a06:	fab3 f383 	clz	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d106      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2200      	movs	r2, #0
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fb3f 	bl	800109c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2101      	movs	r1, #1
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fb23 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10a      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x20e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2101      	movs	r1, #1
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fb18 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001a40:	4603      	mov	r3, r0
 8001a42:	0e9b      	lsrs	r3, r3, #26
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	e01e      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x24c>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2101      	movs	r1, #1
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fb0d 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001a78:	2320      	movs	r3, #32
 8001a7a:	e004      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001a7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a80:	fab3 f383 	clz	r3, r3
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d105      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x264>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	0e9b      	lsrs	r3, r3, #26
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	e018      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x296>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ab4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001ac4:	2320      	movs	r3, #32
 8001ac6:	e004      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d106      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2200      	movs	r2, #0
 8001adc:	2101      	movs	r1, #1
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fadc 	bl	800109c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2102      	movs	r1, #2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fac0 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10a      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x2d4>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2102      	movs	r1, #2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fab5 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	0e9b      	lsrs	r3, r3, #26
 8001b0a:	f003 021f 	and.w	r2, r3, #31
 8001b0e:	e01e      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x312>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2102      	movs	r1, #2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff faaa 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001b2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001b36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	e004      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001b42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d105      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x32a>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0e9b      	lsrs	r3, r3, #26
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	e016      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x358>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001b86:	2320      	movs	r3, #32
 8001b88:	e004      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001b8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d106      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fa7b 	bl	800109c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2103      	movs	r1, #3
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fa5f 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10a      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x396>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2103      	movs	r1, #3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fa54 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	0e9b      	lsrs	r3, r3, #26
 8001bcc:	f003 021f 	and.w	r2, r3, #31
 8001bd0:	e017      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x3c6>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2103      	movs	r1, #3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fa49 	bl	8001070 <LL_ADC_GetOffsetChannel>
 8001bde:	4603      	mov	r3, r0
 8001be0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001bea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bec:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	e003      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001bf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d105      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x3de>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	0e9b      	lsrs	r3, r3, #26
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	e011      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x402>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001c32:	2320      	movs	r3, #32
 8001c34:	e003      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d106      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2200      	movs	r2, #0
 8001c48:	2103      	movs	r1, #3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fa26 	bl	800109c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fb4f 	bl	80012f8 <LL_ADC_IsEnabled>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f040 813f 	bne.w	8001ee0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	6819      	ldr	r1, [r3, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	f7ff fa9a 	bl	80011a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	4a8e      	ldr	r2, [pc, #568]	; (8001eb4 <HAL_ADC_ConfigChannel+0x678>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	f040 8130 	bne.w	8001ee0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10b      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x46c>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	0e9b      	lsrs	r3, r3, #26
 8001c96:	3301      	adds	r3, #1
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	2b09      	cmp	r3, #9
 8001c9e:	bf94      	ite	ls
 8001ca0:	2301      	movls	r3, #1
 8001ca2:	2300      	movhi	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	e019      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x4a0>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb0:	fa93 f3a3 	rbit	r3, r3
 8001cb4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001cb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cb8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001cc0:	2320      	movs	r3, #32
 8001cc2:	e003      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001cc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	2b09      	cmp	r3, #9
 8001cd4:	bf94      	ite	ls
 8001cd6:	2301      	movls	r3, #1
 8001cd8:	2300      	movhi	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d079      	beq.n	8001dd4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d107      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x4c0>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0e9b      	lsrs	r3, r3, #26
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	069b      	lsls	r3, r3, #26
 8001cf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cfa:	e015      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x4ec>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d0c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001d14:	2320      	movs	r3, #32
 8001d16:	e003      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	3301      	adds	r3, #1
 8001d22:	069b      	lsls	r3, r3, #26
 8001d24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x50c>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0e9b      	lsrs	r3, r3, #26
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	e017      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x53c>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d58:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001d60:	2320      	movs	r3, #32
 8001d62:	e003      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	2101      	movs	r1, #1
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	ea42 0103 	orr.w	r1, r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10a      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x562>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0e9b      	lsrs	r3, r3, #26
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	051b      	lsls	r3, r3, #20
 8001d9c:	e018      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x594>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da6:	fa93 f3a3 	rbit	r3, r3
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001db6:	2320      	movs	r3, #32
 8001db8:	e003      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dbc:	fab3 f383 	clz	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	e080      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d107      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x5b4>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	0e9b      	lsrs	r3, r3, #26
 8001de6:	3301      	adds	r3, #1
 8001de8:	069b      	lsls	r3, r3, #26
 8001dea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dee:	e015      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x5e0>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001e08:	2320      	movs	r3, #32
 8001e0a:	e003      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	3301      	adds	r3, #1
 8001e16:	069b      	lsls	r3, r3, #26
 8001e18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d109      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x600>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	0e9b      	lsrs	r3, r3, #26
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	2101      	movs	r1, #1
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	e017      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x630>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	61fb      	str	r3, [r7, #28]
  return result;
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001e54:	2320      	movs	r3, #32
 8001e56:	e003      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	2101      	movs	r1, #1
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	ea42 0103 	orr.w	r1, r2, r3
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10d      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x65c>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	0e9b      	lsrs	r3, r3, #26
 8001e82:	3301      	adds	r3, #1
 8001e84:	f003 021f 	and.w	r2, r3, #31
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3b1e      	subs	r3, #30
 8001e90:	051b      	lsls	r3, r3, #20
 8001e92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e96:	e01d      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x698>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	613b      	str	r3, [r7, #16]
  return result;
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d103      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	e005      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x684>
 8001eb4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	f003 021f 	and.w	r2, r3, #31
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b1e      	subs	r3, #30
 8001ece:	051b      	lsls	r3, r3, #20
 8001ed0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	6892      	ldr	r2, [r2, #8]
 8001eda:	4619      	mov	r1, r3
 8001edc:	f7ff f938 	bl	8001150 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b44      	ldr	r3, [pc, #272]	; (8001ff8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d07a      	beq.n	8001fe2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eec:	4843      	ldr	r0, [pc, #268]	; (8001ffc <HAL_ADC_ConfigChannel+0x7c0>)
 8001eee:	f7ff f88d 	bl	800100c <LL_ADC_GetCommonPathInternalCh>
 8001ef2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a41      	ldr	r2, [pc, #260]	; (8002000 <HAL_ADC_ConfigChannel+0x7c4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d12c      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d126      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a3c      	ldr	r2, [pc, #240]	; (8002004 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d004      	beq.n	8001f20 <HAL_ADC_ConfigChannel+0x6e4>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a3b      	ldr	r2, [pc, #236]	; (8002008 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d15d      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4834      	ldr	r0, [pc, #208]	; (8001ffc <HAL_ADC_ConfigChannel+0x7c0>)
 8001f2c:	f7ff f85b 	bl	8000fe6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f30:	4b36      	ldr	r3, [pc, #216]	; (800200c <HAL_ADC_ConfigChannel+0x7d0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	099b      	lsrs	r3, r3, #6
 8001f36:	4a36      	ldr	r2, [pc, #216]	; (8002010 <HAL_ADC_ConfigChannel+0x7d4>)
 8001f38:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3c:	099b      	lsrs	r3, r3, #6
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f4a:	e002      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f9      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f58:	e040      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a2d      	ldr	r2, [pc, #180]	; (8002014 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d118      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x75a>
 8001f64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d112      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a23      	ldr	r2, [pc, #140]	; (8002004 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d004      	beq.n	8001f84 <HAL_ADC_ConfigChannel+0x748>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a22      	ldr	r2, [pc, #136]	; (8002008 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d12d      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	481b      	ldr	r0, [pc, #108]	; (8001ffc <HAL_ADC_ConfigChannel+0x7c0>)
 8001f90:	f7ff f829 	bl	8000fe6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f94:	e024      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1f      	ldr	r2, [pc, #124]	; (8002018 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d120      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d11a      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a14      	ldr	r2, [pc, #80]	; (8002004 <HAL_ADC_ConfigChannel+0x7c8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d115      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	480e      	ldr	r0, [pc, #56]	; (8001ffc <HAL_ADC_ConfigChannel+0x7c0>)
 8001fc2:	f7ff f810 	bl	8000fe6 <LL_ADC_SetCommonPathInternalCh>
 8001fc6:	e00c      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001fda:	e002      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fdc:	bf00      	nop
 8001fde:	e000      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fe0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001fea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	37d8      	adds	r7, #216	; 0xd8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	80080000 	.word	0x80080000
 8001ffc:	50040300 	.word	0x50040300
 8002000:	c7520000 	.word	0xc7520000
 8002004:	50040000 	.word	0x50040000
 8002008:	50040200 	.word	0x50040200
 800200c:	10000000 	.word	0x10000000
 8002010:	053e2d63 	.word	0x053e2d63
 8002014:	cb840000 	.word	0xcb840000
 8002018:	80000001 	.word	0x80000001

0800201c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff f9ae 	bl	8001394 <LL_ADC_REG_IsConversionOngoing>
 8002038:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff f9cf 	bl	80013e2 <LL_ADC_INJ_IsConversionOngoing>
 8002044:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 8098 	beq.w	8002184 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d02a      	beq.n	80020b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	7e5b      	ldrb	r3, [r3, #25]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d126      	bne.n	80020b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7e1b      	ldrb	r3, [r3, #24]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d122      	bne.n	80020b8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002072:	2301      	movs	r3, #1
 8002074:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002076:	e014      	b.n	80020a2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	4a45      	ldr	r2, [pc, #276]	; (8002190 <ADC_ConversionStop+0x174>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d90d      	bls.n	800209c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	f043 0210 	orr.w	r2, r3, #16
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002090:	f043 0201 	orr.w	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e074      	b.n	8002186 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	3301      	adds	r3, #1
 80020a0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ac:	2b40      	cmp	r3, #64	; 0x40
 80020ae:	d1e3      	bne.n	8002078 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2240      	movs	r2, #64	; 0x40
 80020b6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d014      	beq.n	80020e8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff f966 	bl	8001394 <LL_ADC_REG_IsConversionOngoing>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00c      	beq.n	80020e8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f923 	bl	800131e <LL_ADC_IsDisableOngoing>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d104      	bne.n	80020e8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff f942 	bl	800136c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d014      	beq.n	8002118 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff f975 	bl	80013e2 <LL_ADC_INJ_IsConversionOngoing>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00c      	beq.n	8002118 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff f90b 	bl	800131e <LL_ADC_IsDisableOngoing>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d104      	bne.n	8002118 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f951 	bl	80013ba <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d005      	beq.n	800212a <ADC_ConversionStop+0x10e>
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d105      	bne.n	8002130 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002124:	230c      	movs	r3, #12
 8002126:	617b      	str	r3, [r7, #20]
        break;
 8002128:	e005      	b.n	8002136 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800212a:	2308      	movs	r3, #8
 800212c:	617b      	str	r3, [r7, #20]
        break;
 800212e:	e002      	b.n	8002136 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002130:	2304      	movs	r3, #4
 8002132:	617b      	str	r3, [r7, #20]
        break;
 8002134:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002136:	f7fe ff37 	bl	8000fa8 <HAL_GetTick>
 800213a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800213c:	e01b      	b.n	8002176 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800213e:	f7fe ff33 	bl	8000fa8 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b05      	cmp	r3, #5
 800214a:	d914      	bls.n	8002176 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	f043 0210 	orr.w	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e007      	b.n	8002186 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1dc      	bne.n	800213e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	a33fffff 	.word	0xa33fffff

08002194 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff f8a7 	bl	80012f8 <LL_ADC_IsEnabled>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d169      	bne.n	8002284 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	4b36      	ldr	r3, [pc, #216]	; (8002290 <ADC_Enable+0xfc>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00d      	beq.n	80021da <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	f043 0210 	orr.w	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	f043 0201 	orr.w	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e055      	b.n	8002286 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f862 	bl	80012a8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80021e4:	482b      	ldr	r0, [pc, #172]	; (8002294 <ADC_Enable+0x100>)
 80021e6:	f7fe ff11 	bl	800100c <LL_ADC_GetCommonPathInternalCh>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021f4:	4b28      	ldr	r3, [pc, #160]	; (8002298 <ADC_Enable+0x104>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	099b      	lsrs	r3, r3, #6
 80021fa:	4a28      	ldr	r2, [pc, #160]	; (800229c <ADC_Enable+0x108>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	099b      	lsrs	r3, r3, #6
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	4613      	mov	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800220e:	e002      	b.n	8002216 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	3b01      	subs	r3, #1
 8002214:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f9      	bne.n	8002210 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800221c:	f7fe fec4 	bl	8000fa8 <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002222:	e028      	b.n	8002276 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff f865 	bl	80012f8 <LL_ADC_IsEnabled>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d104      	bne.n	800223e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff f835 	bl	80012a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800223e:	f7fe feb3 	bl	8000fa8 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d914      	bls.n	8002276 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b01      	cmp	r3, #1
 8002258:	d00d      	beq.n	8002276 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f043 0210 	orr.w	r2, r3, #16
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226a:	f043 0201 	orr.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e007      	b.n	8002286 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b01      	cmp	r3, #1
 8002282:	d1cf      	bne.n	8002224 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	8000003f 	.word	0x8000003f
 8002294:	50040300 	.word	0x50040300
 8002298:	10000000 	.word	0x10000000
 800229c:	053e2d63 	.word	0x053e2d63

080022a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff f836 	bl	800131e <LL_ADC_IsDisableOngoing>
 80022b2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff f81d 	bl	80012f8 <LL_ADC_IsEnabled>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d047      	beq.n	8002354 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d144      	bne.n	8002354 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 030d 	and.w	r3, r3, #13
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d10c      	bne.n	80022f2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe fff7 	bl	80012d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2203      	movs	r2, #3
 80022e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022ea:	f7fe fe5d 	bl	8000fa8 <HAL_GetTick>
 80022ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022f0:	e029      	b.n	8002346 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	f043 0210 	orr.w	r2, r3, #16
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002302:	f043 0201 	orr.w	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e023      	b.n	8002356 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800230e:	f7fe fe4b 	bl	8000fa8 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d914      	bls.n	8002346 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00d      	beq.n	8002346 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	f043 0210 	orr.w	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e007      	b.n	8002356 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1dc      	bne.n	800230e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002370:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002374:	2b00      	cmp	r3, #0
 8002376:	d14b      	bne.n	8002410 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d021      	beq.n	80023d6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fe9b 	bl	80010d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d032      	beq.n	8002408 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d12b      	bne.n	8002408 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d11f      	bne.n	8002408 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	f043 0201 	orr.w	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	659a      	str	r2, [r3, #88]	; 0x58
 80023d4:	e018      	b.n	8002408 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d111      	bne.n	8002408 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d105      	bne.n	8002408 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002400:	f043 0201 	orr.w	r2, r3, #1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f7fe fb2f 	bl	8000a6c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800240e:	e00e      	b.n	800242e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f7ff fa03 	bl	8001828 <HAL_ADC_ErrorCallback>
}
 8002422:	e004      	b.n	800242e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	4798      	blx	r3
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f7fe faf9 	bl	8000a3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002470:	f043 0204 	orr.w	r2, r3, #4
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f7ff f9d5 	bl	8001828 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <LL_ADC_IsEnabled>:
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <LL_ADC_IsEnabled+0x18>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <LL_ADC_IsEnabled+0x1a>
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_StartCalibration>:
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80024be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	609a      	str	r2, [r3, #8]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_ADC_IsCalibrationOnGoing>:
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024f2:	d101      	bne.n	80024f8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <LL_ADC_IsCalibrationOnGoing+0x1c>
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <LL_ADC_REG_StartConversion>:
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002516:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800251a:	f043 0204 	orr.w	r2, r3, #4
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	609a      	str	r2, [r3, #8]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_ADC_REG_IsConversionOngoing>:
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b04      	cmp	r3, #4
 8002540:	d101      	bne.n	8002546 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_ADCEx_Calibration_Start+0x1c>
 800256c:	2302      	movs	r3, #2
 800256e:	e04d      	b.n	800260c <HAL_ADCEx_Calibration_Start+0xb8>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff fe91 	bl	80022a0 <ADC_Disable>
 800257e:	4603      	mov	r3, r0
 8002580:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d136      	bne.n	80025f6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002590:	f023 0302 	bic.w	r3, r3, #2
 8002594:	f043 0202 	orr.w	r2, r3, #2
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6839      	ldr	r1, [r7, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff ff82 	bl	80024ac <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80025a8:	e014      	b.n	80025d4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	3301      	adds	r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80025b6:	d30d      	bcc.n	80025d4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	f023 0312 	bic.w	r3, r3, #18
 80025c0:	f043 0210 	orr.w	r2, r3, #16
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e01b      	b.n	800260c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff80 	bl	80024de <LL_ADC_IsCalibrationOnGoing>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e2      	bne.n	80025aa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	f023 0303 	bic.w	r3, r3, #3
 80025ec:	f043 0201 	orr.w	r2, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	659a      	str	r2, [r3, #88]	; 0x58
 80025f4:	e005      	b.n	8002602 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	f043 0210 	orr.w	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800260a:	7bfb      	ldrb	r3, [r7, #15]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b0a0      	sub	sp, #128	; 0x80
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff82 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8002630:	2302      	movs	r3, #2
 8002632:	e080      	b.n	8002736 <HAL_ADCEx_MultiModeStart_DMA+0x122>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800263e:	2302      	movs	r3, #2
 8002640:	e079      	b.n	8002736 <HAL_ADCEx_MultiModeStart_DMA+0x122>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800264a:	2300      	movs	r3, #0
 800264c:	66bb      	str	r3, [r7, #104]	; 0x68
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800264e:	2300      	movs	r3, #0
 8002650:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a3a      	ldr	r2, [pc, #232]	; (8002740 <HAL_ADCEx_MultiModeStart_DMA+0x12c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d102      	bne.n	8002662 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 800265c:	4b39      	ldr	r3, [pc, #228]	; (8002744 <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	e001      	b.n	8002666 <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]

    if (tmphadcSlave.Instance == NULL)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10b      	bne.n	8002684 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002670:	f043 0220 	orr.w	r2, r3, #32
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e058      	b.n	8002736 <HAL_ADCEx_MultiModeStart_DMA+0x122>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f7ff fd85 	bl	8002194 <ADC_Enable>
 800268a:	4603      	mov	r3, r0
 800268c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (tmp_hal_status == HAL_OK)
 8002690:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002694:	2b00      	cmp	r3, #0
 8002696:	d107      	bne.n	80026a8 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8002698:	f107 0310 	add.w	r3, r7, #16
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fd79 	bl	8002194 <ADC_Enable>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80026a8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d13c      	bne.n	800272a <HAL_ADCEx_MultiModeStart_DMA+0x116>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	659a      	str	r2, [r3, #88]	; 0x58
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ce:	4a1e      	ldr	r2, [pc, #120]	; (8002748 <HAL_ADCEx_MultiModeStart_DMA+0x134>)
 80026d0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d6:	4a1d      	ldr	r2, [pc, #116]	; (800274c <HAL_ADCEx_MultiModeStart_DMA+0x138>)
 80026d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026de:	4a1c      	ldr	r2, [pc, #112]	; (8002750 <HAL_ADCEx_MultiModeStart_DMA+0x13c>)
 80026e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026e2:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 80026e4:	67bb      	str	r3, [r7, #120]	; 0x78
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	221c      	movs	r2, #28
 80026ec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0210 	orr.w	r2, r2, #16
 8002704:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800270a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800270c:	330c      	adds	r3, #12
 800270e:	4619      	mov	r1, r3
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f000 fb62 	bl	8002ddc <HAL_DMA_Start_IT>
 8002718:	4603      	mov	r3, r0
 800271a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff feef 	bl	8002506 <LL_ADC_REG_StartConversion>
 8002728:	e003      	b.n	8002732 <HAL_ADCEx_MultiModeStart_DMA+0x11e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
 8002732:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
  }
}
 8002736:	4618      	mov	r0, r3
 8002738:	3780      	adds	r7, #128	; 0x80
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	50040000 	.word	0x50040000
 8002744:	50040100 	.word	0x50040100
 8002748:	0800235f 	.word	0x0800235f
 800274c:	08002437 	.word	0x08002437
 8002750:	08002453 	.word	0x08002453
 8002754:	50040300 	.word	0x50040300

08002758 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b0a0      	sub	sp, #128	; 0x80
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_ADCEx_MultiModeStop_DMA+0x16>
 800276a:	2302      	movs	r3, #2
 800276c:	e0b4      	b.n	80028d8 <HAL_ADCEx_MultiModeStop_DMA+0x180>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002776:	2103      	movs	r1, #3
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff fc4f 	bl	800201c <ADC_ConversionStop>
 800277e:	4603      	mov	r3, r0
 8002780:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002784:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002788:	2b00      	cmp	r3, #0
 800278a:	f040 809f 	bne.w	80028cc <HAL_ADCEx_MultiModeStop_DMA+0x174>
  {
    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800278e:	2300      	movs	r3, #0
 8002790:	663b      	str	r3, [r7, #96]	; 0x60
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002792:	2300      	movs	r3, #0
 8002794:	667b      	str	r3, [r7, #100]	; 0x64

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a51      	ldr	r2, [pc, #324]	; (80028e0 <HAL_ADCEx_MultiModeStop_DMA+0x188>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d102      	bne.n	80027a6 <HAL_ADCEx_MultiModeStop_DMA+0x4e>
 80027a0:	4b50      	ldr	r3, [pc, #320]	; (80028e4 <HAL_ADCEx_MultiModeStop_DMA+0x18c>)
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	e001      	b.n	80027aa <HAL_ADCEx_MultiModeStop_DMA+0x52>
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]

    if (tmphadcSlave.Instance == NULL)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10b      	bne.n	80027c8 <HAL_ADCEx_MultiModeStop_DMA+0x70>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b4:	f043 0220 	orr.w	r2, r3, #32
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e087      	b.n	80028d8 <HAL_ADCEx_MultiModeStop_DMA+0x180>

    /* Procedure to disable the ADC peripheral: wait for conversions          */
    /* effectively stopped (ADC master and ADC slave), then disable ADC       */

    /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
    tickstart = HAL_GetTick();
 80027c8:	f7fe fbee 	bl	8000fa8 <HAL_GetTick>
 80027cc:	6778      	str	r0, [r7, #116]	; 0x74

    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff feac 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 80027d6:	67b8      	str	r0, [r7, #120]	; 0x78
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 80027d8:	e027      	b.n	800282a <HAL_ADCEx_MultiModeStop_DMA+0xd2>
           || (tmphadcSlave_conversion_on_going == 1UL)
          )
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80027da:	f7fe fbe5 	bl	8000fa8 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d91b      	bls.n	8002820 <HAL_ADCEx_MultiModeStop_DMA+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fe9f 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 80027f0:	67b8      	str	r0, [r7, #120]	; 0x78
        if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fe99 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d002      	beq.n	8002808 <HAL_ADCEx_MultiModeStop_DMA+0xb0>
            || (tmphadcSlave_conversion_on_going == 1UL)
 8002802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002804:	2b01      	cmp	r3, #1
 8002806:	d10b      	bne.n	8002820 <HAL_ADCEx_MultiModeStop_DMA+0xc8>
           )
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280c:	f043 0210 	orr.w	r2, r3, #16
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e05b      	b.n	80028d8 <HAL_ADCEx_MultiModeStop_DMA+0x180>
        }
      }

      tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fe83 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 8002828:	67b8      	str	r0, [r7, #120]	; 0x78
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fe7d 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 8002834:	4603      	mov	r3, r0
 8002836:	2b01      	cmp	r3, #1
 8002838:	d0cf      	beq.n	80027da <HAL_ADCEx_MultiModeStop_DMA+0x82>
           || (tmphadcSlave_conversion_on_going == 1UL)
 800283a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800283c:	2b01      	cmp	r3, #1
 800283e:	d0cc      	beq.n	80027da <HAL_ADCEx_MultiModeStop_DMA+0x82>

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    /* Note: DMA channel of ADC slave should be stopped after this function   */
    /*       with HAL_ADC_Stop_DMA() API.                                     */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fb29 	bl	8002e9c <HAL_DMA_Abort>
 800284a:	4603      	mov	r3, r0
 800284c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_ERROR)
 8002850:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002854:	2b01      	cmp	r3, #1
 8002856:	d105      	bne.n	8002864 <HAL_ADCEx_MultiModeStop_DMA+0x10c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0210 	bic.w	r2, r2, #16
 8002872:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripherals: master and slave */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
    /* memory a potential failing status.                                     */
    if (tmp_hal_status == HAL_OK)
 8002874:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002878:	2b00      	cmp	r3, #0
 800287a:	d115      	bne.n	80028a8 <HAL_ADCEx_MultiModeStop_DMA+0x150>
    {
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 800287c:	f107 0308 	add.w	r3, r7, #8
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fd0d 	bl	80022a0 <ADC_Disable>
 8002886:	4603      	mov	r3, r0
 8002888:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff fd07 	bl	80022a0 <ADC_Disable>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10f      	bne.n	80028b8 <HAL_ADCEx_MultiModeStop_DMA+0x160>
 8002898:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10b      	bne.n	80028b8 <HAL_ADCEx_MultiModeStop_DMA+0x160>
          (tmphadcSlave_disable_status == HAL_OK))
      {
        tmp_hal_status = HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80028a6:	e007      	b.n	80028b8 <HAL_ADCEx_MultiModeStop_DMA+0x160>
      }
    }
    else
    {
      /* In case of error, attempt to disable ADC master and slave without status assert */
      (void) ADC_Disable(hadc);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff fcf9 	bl	80022a0 <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 80028ae:	f107 0308 	add.w	r3, r7, #8
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fcf4 	bl	80022a0 <ADC_Disable>
    }

    /* Set ADC state (ADC master) */
    ADC_STATE_CLR_SET(hadc->State,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028c0:	f023 0301 	bic.w	r3, r3, #1
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80028d4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3780      	adds	r7, #128	; 0x80
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	50040000 	.word	0x50040000
 80028e4:	50040100 	.word	0x50040100

080028e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b0a1      	sub	sp, #132	; 0x84
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002902:	2302      	movs	r3, #2
 8002904:	e093      	b.n	8002a2e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800290e:	2300      	movs	r3, #0
 8002910:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002912:	2300      	movs	r3, #0
 8002914:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a47      	ldr	r2, [pc, #284]	; (8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d102      	bne.n	8002926 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002920:	4b46      	ldr	r3, [pc, #280]	; (8002a3c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	e001      	b.n	800292a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10b      	bne.n	8002948 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e072      	b.n	8002a2e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fdef 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 8002950:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fde9 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d154      	bne.n	8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002964:	2b00      	cmp	r3, #0
 8002966:	d151      	bne.n	8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002968:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800296a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d02c      	beq.n	80029ce <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002986:	035b      	lsls	r3, r3, #13
 8002988:	430b      	orrs	r3, r1
 800298a:	431a      	orrs	r2, r3
 800298c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800298e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002990:	4829      	ldr	r0, [pc, #164]	; (8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002992:	f7ff fd78 	bl	8002486 <LL_ADC_IsEnabled>
 8002996:	4604      	mov	r4, r0
 8002998:	4828      	ldr	r0, [pc, #160]	; (8002a3c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800299a:	f7ff fd74 	bl	8002486 <LL_ADC_IsEnabled>
 800299e:	4603      	mov	r3, r0
 80029a0:	431c      	orrs	r4, r3
 80029a2:	4828      	ldr	r0, [pc, #160]	; (8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80029a4:	f7ff fd6f 	bl	8002486 <LL_ADC_IsEnabled>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4323      	orrs	r3, r4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d137      	bne.n	8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029b8:	f023 030f 	bic.w	r3, r3, #15
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	6811      	ldr	r1, [r2, #0]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	6892      	ldr	r2, [r2, #8]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	431a      	orrs	r2, r3
 80029c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ca:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029cc:	e028      	b.n	8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80029ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029d8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029da:	4817      	ldr	r0, [pc, #92]	; (8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80029dc:	f7ff fd53 	bl	8002486 <LL_ADC_IsEnabled>
 80029e0:	4604      	mov	r4, r0
 80029e2:	4816      	ldr	r0, [pc, #88]	; (8002a3c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029e4:	f7ff fd4f 	bl	8002486 <LL_ADC_IsEnabled>
 80029e8:	4603      	mov	r3, r0
 80029ea:	431c      	orrs	r4, r3
 80029ec:	4815      	ldr	r0, [pc, #84]	; (8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80029ee:	f7ff fd4a 	bl	8002486 <LL_ADC_IsEnabled>
 80029f2:	4603      	mov	r3, r0
 80029f4:	4323      	orrs	r3, r4
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d112      	bne.n	8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a02:	f023 030f 	bic.w	r3, r3, #15
 8002a06:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a08:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a0a:	e009      	b.n	8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002a1e:	e000      	b.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002a2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3784      	adds	r7, #132	; 0x84
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd90      	pop	{r4, r7, pc}
 8002a36:	bf00      	nop
 8002a38:	50040000 	.word	0x50040000
 8002a3c:	50040100 	.word	0x50040100
 8002a40:	50040300 	.word	0x50040300
 8002a44:	50040200 	.word	0x50040200

08002a48 <__NVIC_SetPriorityGrouping>:
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <__NVIC_SetPriorityGrouping+0x44>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a64:	4013      	ands	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7a:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <__NVIC_SetPriorityGrouping+0x44>)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	60d3      	str	r3, [r2, #12]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_GetPriorityGrouping>:
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	f003 0307 	and.w	r3, r3, #7
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <__NVIC_EnableIRQ>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	db0b      	blt.n	8002ad6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	f003 021f 	and.w	r2, r3, #31
 8002ac4:	4907      	ldr	r1, [pc, #28]	; (8002ae4 <__NVIC_EnableIRQ+0x38>)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2001      	movs	r0, #1
 8002ace:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000e100 	.word	0xe000e100

08002ae8 <__NVIC_SetPriority>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	6039      	str	r1, [r7, #0]
 8002af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	db0a      	blt.n	8002b12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	490c      	ldr	r1, [pc, #48]	; (8002b34 <__NVIC_SetPriority+0x4c>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	0112      	lsls	r2, r2, #4
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b10:	e00a      	b.n	8002b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	4908      	ldr	r1, [pc, #32]	; (8002b38 <__NVIC_SetPriority+0x50>)
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	3b04      	subs	r3, #4
 8002b20:	0112      	lsls	r2, r2, #4
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	440b      	add	r3, r1
 8002b26:	761a      	strb	r2, [r3, #24]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000e100 	.word	0xe000e100
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <NVIC_EncodePriority>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b089      	sub	sp, #36	; 0x24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f1c3 0307 	rsb	r3, r3, #7
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	bf28      	it	cs
 8002b5a:	2304      	movcs	r3, #4
 8002b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3304      	adds	r3, #4
 8002b62:	2b06      	cmp	r3, #6
 8002b64:	d902      	bls.n	8002b6c <NVIC_EncodePriority+0x30>
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3b03      	subs	r3, #3
 8002b6a:	e000      	b.n	8002b6e <NVIC_EncodePriority+0x32>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	f04f 32ff 	mov.w	r2, #4294967295
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	401a      	ands	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b84:	f04f 31ff 	mov.w	r1, #4294967295
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	43d9      	mvns	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b94:	4313      	orrs	r3, r2
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3724      	adds	r7, #36	; 0x24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb4:	d301      	bcc.n	8002bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e00f      	b.n	8002bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bba:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <SysTick_Config+0x40>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc2:	210f      	movs	r1, #15
 8002bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc8:	f7ff ff8e 	bl	8002ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <SysTick_Config+0x40>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd2:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <SysTick_Config+0x40>)
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	e000e010 	.word	0xe000e010

08002be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff29 	bl	8002a48 <__NVIC_SetPriorityGrouping>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c10:	f7ff ff3e 	bl	8002a90 <__NVIC_GetPriorityGrouping>
 8002c14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	6978      	ldr	r0, [r7, #20]
 8002c1c:	f7ff ff8e 	bl	8002b3c <NVIC_EncodePriority>
 8002c20:	4602      	mov	r2, r0
 8002c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff5d 	bl	8002ae8 <__NVIC_SetPriority>
}
 8002c2e:	bf00      	nop
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff31 	bl	8002aac <__NVIC_EnableIRQ>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff ffa2 	bl	8002ba4 <SysTick_Config>
 8002c60:	4603      	mov	r3, r0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e098      	b.n	8002db0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	4b4d      	ldr	r3, [pc, #308]	; (8002dbc <HAL_DMA_Init+0x150>)
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d80f      	bhi.n	8002caa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4b4b      	ldr	r3, [pc, #300]	; (8002dc0 <HAL_DMA_Init+0x154>)
 8002c92:	4413      	add	r3, r2
 8002c94:	4a4b      	ldr	r2, [pc, #300]	; (8002dc4 <HAL_DMA_Init+0x158>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	009a      	lsls	r2, r3, #2
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a48      	ldr	r2, [pc, #288]	; (8002dc8 <HAL_DMA_Init+0x15c>)
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ca8:	e00e      	b.n	8002cc8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b46      	ldr	r3, [pc, #280]	; (8002dcc <HAL_DMA_Init+0x160>)
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4a43      	ldr	r2, [pc, #268]	; (8002dc4 <HAL_DMA_Init+0x158>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	009a      	lsls	r2, r3, #2
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a42      	ldr	r2, [pc, #264]	; (8002dd0 <HAL_DMA_Init+0x164>)
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d22:	d039      	beq.n	8002d98 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	4a27      	ldr	r2, [pc, #156]	; (8002dc8 <HAL_DMA_Init+0x15c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d11a      	bne.n	8002d64 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d2e:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <HAL_DMA_Init+0x168>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	f003 031c 	and.w	r3, r3, #28
 8002d3a:	210f      	movs	r1, #15
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	4924      	ldr	r1, [pc, #144]	; (8002dd4 <HAL_DMA_Init+0x168>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d48:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <HAL_DMA_Init+0x168>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	f003 031c 	and.w	r3, r3, #28
 8002d58:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5c:	491d      	ldr	r1, [pc, #116]	; (8002dd4 <HAL_DMA_Init+0x168>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]
 8002d62:	e019      	b.n	8002d98 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d64:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <HAL_DMA_Init+0x16c>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6c:	f003 031c 	and.w	r3, r3, #28
 8002d70:	210f      	movs	r1, #15
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	4917      	ldr	r1, [pc, #92]	; (8002dd8 <HAL_DMA_Init+0x16c>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d7e:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <HAL_DMA_Init+0x16c>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6859      	ldr	r1, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f003 031c 	and.w	r3, r3, #28
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	4911      	ldr	r1, [pc, #68]	; (8002dd8 <HAL_DMA_Init+0x16c>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	40020407 	.word	0x40020407
 8002dc0:	bffdfff8 	.word	0xbffdfff8
 8002dc4:	cccccccd 	.word	0xcccccccd
 8002dc8:	40020000 	.word	0x40020000
 8002dcc:	bffdfbf8 	.word	0xbffdfbf8
 8002dd0:	40020400 	.word	0x40020400
 8002dd4:	400200a8 	.word	0x400200a8
 8002dd8:	400204a8 	.word	0x400204a8

08002ddc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_DMA_Start_IT+0x20>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e04b      	b.n	8002e94 <HAL_DMA_Start_IT+0xb8>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d13a      	bne.n	8002e86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f95f 	bl	80030f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d008      	beq.n	8002e54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 020e 	orr.w	r2, r2, #14
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e00f      	b.n	8002e74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0204 	bic.w	r2, r2, #4
 8002e62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 020a 	orr.w	r2, r2, #10
 8002e72:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	e005      	b.n	8002e92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d008      	beq.n	8002ec6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e022      	b.n	8002f0c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 020e 	bic.w	r2, r2, #14
 8002ed4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	f003 021c 	and.w	r2, r3, #28
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d005      	beq.n	8002f3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2204      	movs	r2, #4
 8002f34:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
 8002f3a:	e029      	b.n	8002f90 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 020e 	bic.w	r2, r2, #14
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	f003 021c 	and.w	r2, r3, #28
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	2101      	movs	r1, #1
 8002f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
    }
  }
  return status;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f003 031c 	and.w	r3, r3, #28
 8002fba:	2204      	movs	r2, #4
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d026      	beq.n	8003014 <HAL_DMA_IRQHandler+0x7a>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d021      	beq.n	8003014 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d107      	bne.n	8002fee <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0204 	bic.w	r2, r2, #4
 8002fec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	f003 021c 	and.w	r2, r3, #28
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	2104      	movs	r1, #4
 8002ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8003000:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	2b00      	cmp	r3, #0
 8003008:	d071      	beq.n	80030ee <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003012:	e06c      	b.n	80030ee <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003018:	f003 031c 	and.w	r3, r3, #28
 800301c:	2202      	movs	r2, #2
 800301e:	409a      	lsls	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d02e      	beq.n	8003086 <HAL_DMA_IRQHandler+0xec>
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d029      	beq.n	8003086 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10b      	bne.n	8003058 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 020a 	bic.w	r2, r2, #10
 800304e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	f003 021c 	and.w	r2, r3, #28
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	2102      	movs	r1, #2
 8003066:	fa01 f202 	lsl.w	r2, r1, r2
 800306a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	2b00      	cmp	r3, #0
 800307a:	d038      	beq.n	80030ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003084:	e033      	b.n	80030ee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f003 031c 	and.w	r3, r3, #28
 800308e:	2208      	movs	r2, #8
 8003090:	409a      	lsls	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d02a      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x156>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d025      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 020e 	bic.w	r2, r2, #14
 80030b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	f003 021c 	and.w	r2, r3, #28
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	2101      	movs	r1, #1
 80030c2:	fa01 f202 	lsl.w	r2, r1, r2
 80030c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d004      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80030ee:	bf00      	nop
 80030f0:	bf00      	nop
}
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	f003 021c 	and.w	r2, r3, #28
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	2101      	movs	r1, #1
 8003114:	fa01 f202 	lsl.w	r2, r1, r2
 8003118:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b10      	cmp	r3, #16
 8003128:	d108      	bne.n	800313c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800313a:	e007      	b.n	800314c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	60da      	str	r2, [r3, #12]
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003166:	e17f      	b.n	8003468 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	2101      	movs	r1, #1
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	4013      	ands	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8171 	beq.w	8003462 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d005      	beq.n	8003198 <HAL_GPIO_Init+0x40>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d130      	bne.n	80031fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	2203      	movs	r2, #3
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031ce:	2201      	movs	r2, #1
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	091b      	lsrs	r3, r3, #4
 80031e4:	f003 0201 	and.w	r2, r3, #1
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b03      	cmp	r3, #3
 8003204:	d118      	bne.n	8003238 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800320c:	2201      	movs	r2, #1
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	08db      	lsrs	r3, r3, #3
 8003222:	f003 0201 	and.w	r2, r3, #1
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	2b03      	cmp	r3, #3
 8003242:	d017      	beq.n	8003274 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	2203      	movs	r2, #3
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d123      	bne.n	80032c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	08da      	lsrs	r2, r3, #3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3208      	adds	r2, #8
 8003288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800328c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	220f      	movs	r2, #15
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	08da      	lsrs	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3208      	adds	r2, #8
 80032c2:	6939      	ldr	r1, [r7, #16]
 80032c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	2203      	movs	r2, #3
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 0203 	and.w	r2, r3, #3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80ac 	beq.w	8003462 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800330a:	4b5f      	ldr	r3, [pc, #380]	; (8003488 <HAL_GPIO_Init+0x330>)
 800330c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330e:	4a5e      	ldr	r2, [pc, #376]	; (8003488 <HAL_GPIO_Init+0x330>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6613      	str	r3, [r2, #96]	; 0x60
 8003316:	4b5c      	ldr	r3, [pc, #368]	; (8003488 <HAL_GPIO_Init+0x330>)
 8003318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	60bb      	str	r3, [r7, #8]
 8003320:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003322:	4a5a      	ldr	r2, [pc, #360]	; (800348c <HAL_GPIO_Init+0x334>)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	089b      	lsrs	r3, r3, #2
 8003328:	3302      	adds	r3, #2
 800332a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	220f      	movs	r2, #15
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43db      	mvns	r3, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4013      	ands	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800334c:	d025      	beq.n	800339a <HAL_GPIO_Init+0x242>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4f      	ldr	r2, [pc, #316]	; (8003490 <HAL_GPIO_Init+0x338>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d01f      	beq.n	8003396 <HAL_GPIO_Init+0x23e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4e      	ldr	r2, [pc, #312]	; (8003494 <HAL_GPIO_Init+0x33c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d019      	beq.n	8003392 <HAL_GPIO_Init+0x23a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4d      	ldr	r2, [pc, #308]	; (8003498 <HAL_GPIO_Init+0x340>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_GPIO_Init+0x236>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a4c      	ldr	r2, [pc, #304]	; (800349c <HAL_GPIO_Init+0x344>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00d      	beq.n	800338a <HAL_GPIO_Init+0x232>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a4b      	ldr	r2, [pc, #300]	; (80034a0 <HAL_GPIO_Init+0x348>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d007      	beq.n	8003386 <HAL_GPIO_Init+0x22e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a4a      	ldr	r2, [pc, #296]	; (80034a4 <HAL_GPIO_Init+0x34c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d101      	bne.n	8003382 <HAL_GPIO_Init+0x22a>
 800337e:	2306      	movs	r3, #6
 8003380:	e00c      	b.n	800339c <HAL_GPIO_Init+0x244>
 8003382:	2307      	movs	r3, #7
 8003384:	e00a      	b.n	800339c <HAL_GPIO_Init+0x244>
 8003386:	2305      	movs	r3, #5
 8003388:	e008      	b.n	800339c <HAL_GPIO_Init+0x244>
 800338a:	2304      	movs	r3, #4
 800338c:	e006      	b.n	800339c <HAL_GPIO_Init+0x244>
 800338e:	2303      	movs	r3, #3
 8003390:	e004      	b.n	800339c <HAL_GPIO_Init+0x244>
 8003392:	2302      	movs	r3, #2
 8003394:	e002      	b.n	800339c <HAL_GPIO_Init+0x244>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_GPIO_Init+0x244>
 800339a:	2300      	movs	r3, #0
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	f002 0203 	and.w	r2, r2, #3
 80033a2:	0092      	lsls	r2, r2, #2
 80033a4:	4093      	lsls	r3, r2
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033ac:	4937      	ldr	r1, [pc, #220]	; (800348c <HAL_GPIO_Init+0x334>)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	089b      	lsrs	r3, r3, #2
 80033b2:	3302      	adds	r3, #2
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033ba:	4b3b      	ldr	r3, [pc, #236]	; (80034a8 <HAL_GPIO_Init+0x350>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4013      	ands	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033de:	4a32      	ldr	r2, [pc, #200]	; (80034a8 <HAL_GPIO_Init+0x350>)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033e4:	4b30      	ldr	r3, [pc, #192]	; (80034a8 <HAL_GPIO_Init+0x350>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4013      	ands	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003408:	4a27      	ldr	r2, [pc, #156]	; (80034a8 <HAL_GPIO_Init+0x350>)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800340e:	4b26      	ldr	r3, [pc, #152]	; (80034a8 <HAL_GPIO_Init+0x350>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	43db      	mvns	r3, r3
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4013      	ands	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003432:	4a1d      	ldr	r2, [pc, #116]	; (80034a8 <HAL_GPIO_Init+0x350>)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_GPIO_Init+0x350>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	43db      	mvns	r3, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4013      	ands	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800345c:	4a12      	ldr	r2, [pc, #72]	; (80034a8 <HAL_GPIO_Init+0x350>)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	3301      	adds	r3, #1
 8003466:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	fa22 f303 	lsr.w	r3, r2, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	f47f ae78 	bne.w	8003168 <HAL_GPIO_Init+0x10>
  }
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40021000 	.word	0x40021000
 800348c:	40010000 	.word	0x40010000
 8003490:	48000400 	.word	0x48000400
 8003494:	48000800 	.word	0x48000800
 8003498:	48000c00 	.word	0x48000c00
 800349c:	48001000 	.word	0x48001000
 80034a0:	48001400 	.word	0x48001400
 80034a4:	48001800 	.word	0x48001800
 80034a8:	40010400 	.word	0x40010400

080034ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	807b      	strh	r3, [r7, #2]
 80034b8:	4613      	mov	r3, r2
 80034ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034bc:	787b      	ldrb	r3, [r7, #1]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034c2:	887a      	ldrh	r2, [r7, #2]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034c8:	e002      	b.n	80034d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034ca:	887a      	ldrh	r2, [r7, #2]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ea:	6013      	str	r3, [r2, #0]
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40007000 	.word	0x40007000

080034fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003500:	4b04      	ldr	r3, [pc, #16]	; (8003514 <HAL_PWREx_GetVoltageRange+0x18>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003508:	4618      	mov	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40007000 	.word	0x40007000

08003518 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003526:	d130      	bne.n	800358a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003528:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003534:	d038      	beq.n	80035a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003536:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800353e:	4a1e      	ldr	r2, [pc, #120]	; (80035b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003544:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003546:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2232      	movs	r2, #50	; 0x32
 800354c:	fb02 f303 	mul.w	r3, r2, r3
 8003550:	4a1b      	ldr	r2, [pc, #108]	; (80035c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	0c9b      	lsrs	r3, r3, #18
 8003558:	3301      	adds	r3, #1
 800355a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800355c:	e002      	b.n	8003564 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3b01      	subs	r3, #1
 8003562:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003564:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003570:	d102      	bne.n	8003578 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f2      	bne.n	800355e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003578:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003584:	d110      	bne.n	80035a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e00f      	b.n	80035aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003596:	d007      	beq.n	80035a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003598:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035a0:	4a05      	ldr	r2, [pc, #20]	; (80035b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40007000 	.word	0x40007000
 80035bc:	10000000 	.word	0x10000000
 80035c0:	431bde83 	.word	0x431bde83

080035c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e3c6      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035d6:	4ba1      	ldr	r3, [pc, #644]	; (800385c <HAL_RCC_OscConfig+0x298>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035e0:	4b9e      	ldr	r3, [pc, #632]	; (800385c <HAL_RCC_OscConfig+0x298>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80e4 	beq.w	80037c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d007      	beq.n	800360e <HAL_RCC_OscConfig+0x4a>
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b0c      	cmp	r3, #12
 8003602:	f040 808b 	bne.w	800371c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b01      	cmp	r3, #1
 800360a:	f040 8087 	bne.w	800371c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800360e:	4b93      	ldr	r3, [pc, #588]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_RCC_OscConfig+0x62>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e39e      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1a      	ldr	r2, [r3, #32]
 800362a:	4b8c      	ldr	r3, [pc, #560]	; (800385c <HAL_RCC_OscConfig+0x298>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d004      	beq.n	8003640 <HAL_RCC_OscConfig+0x7c>
 8003636:	4b89      	ldr	r3, [pc, #548]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800363e:	e005      	b.n	800364c <HAL_RCC_OscConfig+0x88>
 8003640:	4b86      	ldr	r3, [pc, #536]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800364c:	4293      	cmp	r3, r2
 800364e:	d223      	bcs.n	8003698 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	4618      	mov	r0, r3
 8003656:	f000 fd53 	bl	8004100 <RCC_SetFlashLatencyFromMSIRange>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e37f      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003664:	4b7d      	ldr	r3, [pc, #500]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a7c      	ldr	r2, [pc, #496]	; (800385c <HAL_RCC_OscConfig+0x298>)
 800366a:	f043 0308 	orr.w	r3, r3, #8
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b7a      	ldr	r3, [pc, #488]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4977      	ldr	r1, [pc, #476]	; (800385c <HAL_RCC_OscConfig+0x298>)
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003682:	4b76      	ldr	r3, [pc, #472]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	4972      	ldr	r1, [pc, #456]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]
 8003696:	e025      	b.n	80036e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003698:	4b70      	ldr	r3, [pc, #448]	; (800385c <HAL_RCC_OscConfig+0x298>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a6f      	ldr	r2, [pc, #444]	; (800385c <HAL_RCC_OscConfig+0x298>)
 800369e:	f043 0308 	orr.w	r3, r3, #8
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	4b6d      	ldr	r3, [pc, #436]	; (800385c <HAL_RCC_OscConfig+0x298>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	496a      	ldr	r1, [pc, #424]	; (800385c <HAL_RCC_OscConfig+0x298>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036b6:	4b69      	ldr	r3, [pc, #420]	; (800385c <HAL_RCC_OscConfig+0x298>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	4965      	ldr	r1, [pc, #404]	; (800385c <HAL_RCC_OscConfig+0x298>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d109      	bne.n	80036e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fd13 	bl	8004100 <RCC_SetFlashLatencyFromMSIRange>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e33f      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036e4:	f000 fc48 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 80036e8:	4602      	mov	r2, r0
 80036ea:	4b5c      	ldr	r3, [pc, #368]	; (800385c <HAL_RCC_OscConfig+0x298>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	091b      	lsrs	r3, r3, #4
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	495a      	ldr	r1, [pc, #360]	; (8003860 <HAL_RCC_OscConfig+0x29c>)
 80036f6:	5ccb      	ldrb	r3, [r1, r3]
 80036f8:	f003 031f 	and.w	r3, r3, #31
 80036fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003700:	4a58      	ldr	r2, [pc, #352]	; (8003864 <HAL_RCC_OscConfig+0x2a0>)
 8003702:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003704:	4b58      	ldr	r3, [pc, #352]	; (8003868 <HAL_RCC_OscConfig+0x2a4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7fd fbfd 	bl	8000f08 <HAL_InitTick>
 800370e:	4603      	mov	r3, r0
 8003710:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d052      	beq.n	80037be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	e323      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d032      	beq.n	800378a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003724:	4b4d      	ldr	r3, [pc, #308]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a4c      	ldr	r2, [pc, #304]	; (800385c <HAL_RCC_OscConfig+0x298>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003730:	f7fd fc3a 	bl	8000fa8 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003738:	f7fd fc36 	bl	8000fa8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e30c      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800374a:	4b44      	ldr	r3, [pc, #272]	; (800385c <HAL_RCC_OscConfig+0x298>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003756:	4b41      	ldr	r3, [pc, #260]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a40      	ldr	r2, [pc, #256]	; (800385c <HAL_RCC_OscConfig+0x298>)
 800375c:	f043 0308 	orr.w	r3, r3, #8
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	4b3e      	ldr	r3, [pc, #248]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	493b      	ldr	r1, [pc, #236]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003770:	4313      	orrs	r3, r2
 8003772:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003774:	4b39      	ldr	r3, [pc, #228]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	021b      	lsls	r3, r3, #8
 8003782:	4936      	ldr	r1, [pc, #216]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003784:	4313      	orrs	r3, r2
 8003786:	604b      	str	r3, [r1, #4]
 8003788:	e01a      	b.n	80037c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800378a:	4b34      	ldr	r3, [pc, #208]	; (800385c <HAL_RCC_OscConfig+0x298>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a33      	ldr	r2, [pc, #204]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003796:	f7fd fc07 	bl	8000fa8 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800379e:	f7fd fc03 	bl	8000fa8 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e2d9      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037b0:	4b2a      	ldr	r3, [pc, #168]	; (800385c <HAL_RCC_OscConfig+0x298>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1f0      	bne.n	800379e <HAL_RCC_OscConfig+0x1da>
 80037bc:	e000      	b.n	80037c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d074      	beq.n	80038b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d005      	beq.n	80037de <HAL_RCC_OscConfig+0x21a>
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b0c      	cmp	r3, #12
 80037d6:	d10e      	bne.n	80037f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d10b      	bne.n	80037f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037de:	4b1f      	ldr	r3, [pc, #124]	; (800385c <HAL_RCC_OscConfig+0x298>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d064      	beq.n	80038b4 <HAL_RCC_OscConfig+0x2f0>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d160      	bne.n	80038b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e2b6      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fe:	d106      	bne.n	800380e <HAL_RCC_OscConfig+0x24a>
 8003800:	4b16      	ldr	r3, [pc, #88]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a15      	ldr	r2, [pc, #84]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	e01d      	b.n	800384a <HAL_RCC_OscConfig+0x286>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003816:	d10c      	bne.n	8003832 <HAL_RCC_OscConfig+0x26e>
 8003818:	4b10      	ldr	r3, [pc, #64]	; (800385c <HAL_RCC_OscConfig+0x298>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a0f      	ldr	r2, [pc, #60]	; (800385c <HAL_RCC_OscConfig+0x298>)
 800381e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b0d      	ldr	r3, [pc, #52]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a0c      	ldr	r2, [pc, #48]	; (800385c <HAL_RCC_OscConfig+0x298>)
 800382a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	e00b      	b.n	800384a <HAL_RCC_OscConfig+0x286>
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a09      	ldr	r2, [pc, #36]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	4b07      	ldr	r3, [pc, #28]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a06      	ldr	r2, [pc, #24]	; (800385c <HAL_RCC_OscConfig+0x298>)
 8003844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003848:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d01c      	beq.n	800388c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003852:	f7fd fba9 	bl	8000fa8 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003858:	e011      	b.n	800387e <HAL_RCC_OscConfig+0x2ba>
 800385a:	bf00      	nop
 800385c:	40021000 	.word	0x40021000
 8003860:	08006798 	.word	0x08006798
 8003864:	10000000 	.word	0x10000000
 8003868:	10000004 	.word	0x10000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800386c:	f7fd fb9c 	bl	8000fa8 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b64      	cmp	r3, #100	; 0x64
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e272      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800387e:	4baf      	ldr	r3, [pc, #700]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0x2a8>
 800388a:	e014      	b.n	80038b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fd fb8c 	bl	8000fa8 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003894:	f7fd fb88 	bl	8000fa8 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	; 0x64
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e25e      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038a6:	4ba5      	ldr	r3, [pc, #660]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x2d0>
 80038b2:	e000      	b.n	80038b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d060      	beq.n	8003984 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_OscConfig+0x310>
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b0c      	cmp	r3, #12
 80038cc:	d119      	bne.n	8003902 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d116      	bne.n	8003902 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d4:	4b99      	ldr	r3, [pc, #612]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_OscConfig+0x328>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e23b      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ec:	4b93      	ldr	r3, [pc, #588]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	061b      	lsls	r3, r3, #24
 80038fa:	4990      	ldr	r1, [pc, #576]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003900:	e040      	b.n	8003984 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d023      	beq.n	8003952 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800390a:	4b8c      	ldr	r3, [pc, #560]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a8b      	ldr	r2, [pc, #556]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003916:	f7fd fb47 	bl	8000fa8 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800391e:	f7fd fb43 	bl	8000fa8 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e219      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003930:	4b82      	ldr	r3, [pc, #520]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393c:	4b7f      	ldr	r3, [pc, #508]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	061b      	lsls	r3, r3, #24
 800394a:	497c      	ldr	r1, [pc, #496]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]
 8003950:	e018      	b.n	8003984 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003952:	4b7a      	ldr	r3, [pc, #488]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a79      	ldr	r2, [pc, #484]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800395c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395e:	f7fd fb23 	bl	8000fa8 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003966:	f7fd fb1f 	bl	8000fa8 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e1f5      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003978:	4b70      	ldr	r3, [pc, #448]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f0      	bne.n	8003966 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d03c      	beq.n	8003a0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01c      	beq.n	80039d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003998:	4b68      	ldr	r3, [pc, #416]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 800399a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399e:	4a67      	ldr	r2, [pc, #412]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fd fafe 	bl	8000fa8 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b0:	f7fd fafa 	bl	8000fa8 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e1d0      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039c2:	4b5e      	ldr	r3, [pc, #376]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 80039c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0ef      	beq.n	80039b0 <HAL_RCC_OscConfig+0x3ec>
 80039d0:	e01b      	b.n	8003a0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d2:	4b5a      	ldr	r3, [pc, #360]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 80039d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d8:	4a58      	ldr	r2, [pc, #352]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 80039da:	f023 0301 	bic.w	r3, r3, #1
 80039de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7fd fae1 	bl	8000fa8 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ea:	f7fd fadd 	bl	8000fa8 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e1b3      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039fc:	4b4f      	ldr	r3, [pc, #316]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 80039fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1ef      	bne.n	80039ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 80a6 	beq.w	8003b64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a1c:	4b47      	ldr	r3, [pc, #284]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10d      	bne.n	8003a44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a28:	4b44      	ldr	r3, [pc, #272]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	4a43      	ldr	r2, [pc, #268]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a32:	6593      	str	r3, [r2, #88]	; 0x58
 8003a34:	4b41      	ldr	r3, [pc, #260]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a40:	2301      	movs	r3, #1
 8003a42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a44:	4b3e      	ldr	r3, [pc, #248]	; (8003b40 <HAL_RCC_OscConfig+0x57c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d118      	bne.n	8003a82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a50:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_RCC_OscConfig+0x57c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a3a      	ldr	r2, [pc, #232]	; (8003b40 <HAL_RCC_OscConfig+0x57c>)
 8003a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a5c:	f7fd faa4 	bl	8000fa8 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a64:	f7fd faa0 	bl	8000fa8 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e176      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a76:	4b32      	ldr	r3, [pc, #200]	; (8003b40 <HAL_RCC_OscConfig+0x57c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d108      	bne.n	8003a9c <HAL_RCC_OscConfig+0x4d8>
 8003a8a:	4b2c      	ldr	r3, [pc, #176]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a90:	4a2a      	ldr	r2, [pc, #168]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a9a:	e024      	b.n	8003ae6 <HAL_RCC_OscConfig+0x522>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b05      	cmp	r3, #5
 8003aa2:	d110      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x502>
 8003aa4:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	4a24      	ldr	r2, [pc, #144]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003aac:	f043 0304 	orr.w	r3, r3, #4
 8003ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ab4:	4b21      	ldr	r3, [pc, #132]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	4a20      	ldr	r2, [pc, #128]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac4:	e00f      	b.n	8003ae6 <HAL_RCC_OscConfig+0x522>
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003acc:	4a1b      	ldr	r2, [pc, #108]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003ace:	f023 0301 	bic.w	r3, r3, #1
 8003ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad6:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	4a17      	ldr	r2, [pc, #92]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003ade:	f023 0304 	bic.w	r3, r3, #4
 8003ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d016      	beq.n	8003b1c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aee:	f7fd fa5b 	bl	8000fa8 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af4:	e00a      	b.n	8003b0c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af6:	f7fd fa57 	bl	8000fa8 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e12b      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_RCC_OscConfig+0x578>)
 8003b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0ed      	beq.n	8003af6 <HAL_RCC_OscConfig+0x532>
 8003b1a:	e01a      	b.n	8003b52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1c:	f7fd fa44 	bl	8000fa8 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b22:	e00f      	b.n	8003b44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b24:	f7fd fa40 	bl	8000fa8 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d906      	bls.n	8003b44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e114      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b44:	4b89      	ldr	r3, [pc, #548]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1e8      	bne.n	8003b24 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b52:	7ffb      	ldrb	r3, [r7, #31]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d105      	bne.n	8003b64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b58:	4b84      	ldr	r3, [pc, #528]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5c:	4a83      	ldr	r2, [pc, #524]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b62:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 80fa 	beq.w	8003d62 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	f040 80d0 	bne.w	8003d18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b78:	4b7c      	ldr	r3, [pc, #496]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f003 0203 	and.w	r2, r3, #3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d130      	bne.n	8003bee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	3b01      	subs	r3, #1
 8003b98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d127      	bne.n	8003bee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d11f      	bne.n	8003bee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bb8:	2a07      	cmp	r2, #7
 8003bba:	bf14      	ite	ne
 8003bbc:	2201      	movne	r2, #1
 8003bbe:	2200      	moveq	r2, #0
 8003bc0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d113      	bne.n	8003bee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d109      	bne.n	8003bee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	085b      	lsrs	r3, r3, #1
 8003be6:	3b01      	subs	r3, #1
 8003be8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d06e      	beq.n	8003ccc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b0c      	cmp	r3, #12
 8003bf2:	d069      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bf4:	4b5d      	ldr	r3, [pc, #372]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c00:	4b5a      	ldr	r3, [pc, #360]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0a9      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c10:	4b56      	ldr	r3, [pc, #344]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a55      	ldr	r2, [pc, #340]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c1c:	f7fd f9c4 	bl	8000fa8 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c24:	f7fd f9c0 	bl	8000fa8 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e096      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c36:	4b4d      	ldr	r3, [pc, #308]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c42:	4b4a      	ldr	r3, [pc, #296]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	4b4a      	ldr	r3, [pc, #296]	; (8003d70 <HAL_RCC_OscConfig+0x7ac>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c52:	3a01      	subs	r2, #1
 8003c54:	0112      	lsls	r2, r2, #4
 8003c56:	4311      	orrs	r1, r2
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c5c:	0212      	lsls	r2, r2, #8
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c64:	0852      	lsrs	r2, r2, #1
 8003c66:	3a01      	subs	r2, #1
 8003c68:	0552      	lsls	r2, r2, #21
 8003c6a:	4311      	orrs	r1, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c70:	0852      	lsrs	r2, r2, #1
 8003c72:	3a01      	subs	r2, #1
 8003c74:	0652      	lsls	r2, r2, #25
 8003c76:	4311      	orrs	r1, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c7c:	0912      	lsrs	r2, r2, #4
 8003c7e:	0452      	lsls	r2, r2, #17
 8003c80:	430a      	orrs	r2, r1
 8003c82:	493a      	ldr	r1, [pc, #232]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c88:	4b38      	ldr	r3, [pc, #224]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a37      	ldr	r2, [pc, #220]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c94:	4b35      	ldr	r3, [pc, #212]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4a34      	ldr	r2, [pc, #208]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ca0:	f7fd f982 	bl	8000fa8 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fd f97e 	bl	8000fa8 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e054      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cba:	4b2c      	ldr	r3, [pc, #176]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cc6:	e04c      	b.n	8003d62 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e04b      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ccc:	4b27      	ldr	r3, [pc, #156]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d144      	bne.n	8003d62 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cd8:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a23      	ldr	r2, [pc, #140]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ce2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ce4:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4a20      	ldr	r2, [pc, #128]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cf0:	f7fd f95a 	bl	8000fa8 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7fd f956 	bl	8000fa8 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e02c      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d0a:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x734>
 8003d16:	e024      	b.n	8003d62 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b0c      	cmp	r3, #12
 8003d1c:	d01f      	beq.n	8003d5e <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1e:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a12      	ldr	r2, [pc, #72]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003d24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fd f93d 	bl	8000fa8 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d32:	f7fd f939 	bl	8000fa8 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e00f      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d44:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f0      	bne.n	8003d32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d50:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	4905      	ldr	r1, [pc, #20]	; (8003d6c <HAL_RCC_OscConfig+0x7a8>)
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <HAL_RCC_OscConfig+0x7b0>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60cb      	str	r3, [r1, #12]
 8003d5c:	e001      	b.n	8003d62 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	f99d808c 	.word	0xf99d808c
 8003d74:	feeefffc 	.word	0xfeeefffc

08003d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0e7      	b.n	8003f5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b75      	ldr	r3, [pc, #468]	; (8003f64 <HAL_RCC_ClockConfig+0x1ec>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d910      	bls.n	8003dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b72      	ldr	r3, [pc, #456]	; (8003f64 <HAL_RCC_ClockConfig+0x1ec>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 0207 	bic.w	r2, r3, #7
 8003da2:	4970      	ldr	r1, [pc, #448]	; (8003f64 <HAL_RCC_ClockConfig+0x1ec>)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b6e      	ldr	r3, [pc, #440]	; (8003f64 <HAL_RCC_ClockConfig+0x1ec>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0cf      	b.n	8003f5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d010      	beq.n	8003dea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	4b66      	ldr	r3, [pc, #408]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d908      	bls.n	8003dea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd8:	4b63      	ldr	r3, [pc, #396]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	4960      	ldr	r1, [pc, #384]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d04c      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d107      	bne.n	8003e0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfe:	4b5a      	ldr	r3, [pc, #360]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d121      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e0a6      	b.n	8003f5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e16:	4b54      	ldr	r3, [pc, #336]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d115      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e09a      	b.n	8003f5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d107      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e2e:	4b4e      	ldr	r3, [pc, #312]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d109      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e08e      	b.n	8003f5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e3e:	4b4a      	ldr	r3, [pc, #296]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e086      	b.n	8003f5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e4e:	4b46      	ldr	r3, [pc, #280]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f023 0203 	bic.w	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	4943      	ldr	r1, [pc, #268]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e60:	f7fd f8a2 	bl	8000fa8 <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	e00a      	b.n	8003e7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e68:	f7fd f89e 	bl	8000fa8 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e06e      	b.n	8003f5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7e:	4b3a      	ldr	r3, [pc, #232]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 020c 	and.w	r2, r3, #12
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d1eb      	bne.n	8003e68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d010      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	4b31      	ldr	r3, [pc, #196]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d208      	bcs.n	8003ebe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eac:	4b2e      	ldr	r3, [pc, #184]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	492b      	ldr	r1, [pc, #172]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ebe:	4b29      	ldr	r3, [pc, #164]	; (8003f64 <HAL_RCC_ClockConfig+0x1ec>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d210      	bcs.n	8003eee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ecc:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <HAL_RCC_ClockConfig+0x1ec>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f023 0207 	bic.w	r2, r3, #7
 8003ed4:	4923      	ldr	r1, [pc, #140]	; (8003f64 <HAL_RCC_ClockConfig+0x1ec>)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003edc:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <HAL_RCC_ClockConfig+0x1ec>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e036      	b.n	8003f5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003efa:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	4918      	ldr	r1, [pc, #96]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d009      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f18:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4910      	ldr	r1, [pc, #64]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f2c:	f000 f824 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8003f30:	4602      	mov	r2, r0
 8003f32:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <HAL_RCC_ClockConfig+0x1f0>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	490b      	ldr	r1, [pc, #44]	; (8003f6c <HAL_RCC_ClockConfig+0x1f4>)
 8003f3e:	5ccb      	ldrb	r3, [r1, r3]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
 8003f48:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <HAL_RCC_ClockConfig+0x1f8>)
 8003f4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_RCC_ClockConfig+0x1fc>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fc ffd9 	bl	8000f08 <HAL_InitTick>
 8003f56:	4603      	mov	r3, r0
 8003f58:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40022000 	.word	0x40022000
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	08006798 	.word	0x08006798
 8003f70:	10000000 	.word	0x10000000
 8003f74:	10000004 	.word	0x10000004

08003f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b089      	sub	sp, #36	; 0x24
 8003f7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	2300      	movs	r3, #0
 8003f84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f86:	4b3e      	ldr	r3, [pc, #248]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f90:	4b3b      	ldr	r3, [pc, #236]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_RCC_GetSysClockFreq+0x34>
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	2b0c      	cmp	r3, #12
 8003fa4:	d121      	bne.n	8003fea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d11e      	bne.n	8003fea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fac:	4b34      	ldr	r3, [pc, #208]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d107      	bne.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fb8:	4b31      	ldr	r3, [pc, #196]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fbe:	0a1b      	lsrs	r3, r3, #8
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	e005      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fc8:	4b2d      	ldr	r3, [pc, #180]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	091b      	lsrs	r3, r3, #4
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fd4:	4a2b      	ldr	r2, [pc, #172]	; (8004084 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10d      	bne.n	8004000 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fe8:	e00a      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d102      	bne.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ff0:	4b25      	ldr	r3, [pc, #148]	; (8004088 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	e004      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ffc:	4b23      	ldr	r3, [pc, #140]	; (800408c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ffe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b0c      	cmp	r3, #12
 8004004:	d134      	bne.n	8004070 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004006:	4b1e      	ldr	r3, [pc, #120]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d003      	beq.n	800401e <HAL_RCC_GetSysClockFreq+0xa6>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b03      	cmp	r3, #3
 800401a:	d003      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0xac>
 800401c:	e005      	b.n	800402a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800401e:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <HAL_RCC_GetSysClockFreq+0x110>)
 8004020:	617b      	str	r3, [r7, #20]
      break;
 8004022:	e005      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004024:	4b19      	ldr	r3, [pc, #100]	; (800408c <HAL_RCC_GetSysClockFreq+0x114>)
 8004026:	617b      	str	r3, [r7, #20]
      break;
 8004028:	e002      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	617b      	str	r3, [r7, #20]
      break;
 800402e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004030:	4b13      	ldr	r3, [pc, #76]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	3301      	adds	r3, #1
 800403c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	fb02 f203 	mul.w	r2, r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <HAL_RCC_GetSysClockFreq+0x108>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	0e5b      	lsrs	r3, r3, #25
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	3301      	adds	r3, #1
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004070:	69bb      	ldr	r3, [r7, #24]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3724      	adds	r7, #36	; 0x24
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000
 8004084:	080067b0 	.word	0x080067b0
 8004088:	00f42400 	.word	0x00f42400
 800408c:	003d0900 	.word	0x003d0900

08004090 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004094:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	10000000 	.word	0x10000000

080040a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040ac:	f7ff fff0 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	0a1b      	lsrs	r3, r3, #8
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4904      	ldr	r1, [pc, #16]	; (80040d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000
 80040d0:	080067a8 	.word	0x080067a8

080040d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040d8:	f7ff ffda 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040dc:	4602      	mov	r2, r0
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	0adb      	lsrs	r3, r3, #11
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	4904      	ldr	r1, [pc, #16]	; (80040fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ea:	5ccb      	ldrb	r3, [r1, r3]
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000
 80040fc:	080067a8 	.word	0x080067a8

08004100 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004108:	2300      	movs	r3, #0
 800410a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800410c:	4b2a      	ldr	r3, [pc, #168]	; (80041b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004118:	f7ff f9f0 	bl	80034fc <HAL_PWREx_GetVoltageRange>
 800411c:	6178      	str	r0, [r7, #20]
 800411e:	e014      	b.n	800414a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004120:	4b25      	ldr	r3, [pc, #148]	; (80041b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004124:	4a24      	ldr	r2, [pc, #144]	; (80041b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412a:	6593      	str	r3, [r2, #88]	; 0x58
 800412c:	4b22      	ldr	r3, [pc, #136]	; (80041b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800412e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004138:	f7ff f9e0 	bl	80034fc <HAL_PWREx_GetVoltageRange>
 800413c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800413e:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004148:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004150:	d10b      	bne.n	800416a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b80      	cmp	r3, #128	; 0x80
 8004156:	d919      	bls.n	800418c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2ba0      	cmp	r3, #160	; 0xa0
 800415c:	d902      	bls.n	8004164 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800415e:	2302      	movs	r3, #2
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	e013      	b.n	800418c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004164:	2301      	movs	r3, #1
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	e010      	b.n	800418c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b80      	cmp	r3, #128	; 0x80
 800416e:	d902      	bls.n	8004176 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004170:	2303      	movs	r3, #3
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	e00a      	b.n	800418c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b80      	cmp	r3, #128	; 0x80
 800417a:	d102      	bne.n	8004182 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800417c:	2302      	movs	r3, #2
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	e004      	b.n	800418c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b70      	cmp	r3, #112	; 0x70
 8004186:	d101      	bne.n	800418c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004188:	2301      	movs	r3, #1
 800418a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f023 0207 	bic.w	r2, r3, #7
 8004194:	4909      	ldr	r1, [pc, #36]	; (80041bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800419c:	4b07      	ldr	r3, [pc, #28]	; (80041bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d001      	beq.n	80041ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40022000 	.word	0x40022000

080041c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041c8:	2300      	movs	r3, #0
 80041ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041cc:	2300      	movs	r3, #0
 80041ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d041      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041e4:	d02a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041ea:	d824      	bhi.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041f0:	d008      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041f6:	d81e      	bhi.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004200:	d010      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004202:	e018      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004204:	4b86      	ldr	r3, [pc, #536]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4a85      	ldr	r2, [pc, #532]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004210:	e015      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3304      	adds	r3, #4
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f000 facb 	bl	80047b4 <RCCEx_PLLSAI1_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004222:	e00c      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3320      	adds	r3, #32
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fbb6 	bl	800499c <RCCEx_PLLSAI2_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004234:	e003      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	74fb      	strb	r3, [r7, #19]
      break;
 800423a:	e000      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800423c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800423e:	7cfb      	ldrb	r3, [r7, #19]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004244:	4b76      	ldr	r3, [pc, #472]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004252:	4973      	ldr	r1, [pc, #460]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800425a:	e001      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d041      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004270:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004274:	d02a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004276:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800427a:	d824      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800427c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004280:	d008      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004286:	d81e      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800428c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004290:	d010      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004292:	e018      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004294:	4b62      	ldr	r3, [pc, #392]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4a61      	ldr	r2, [pc, #388]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042a0:	e015      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3304      	adds	r3, #4
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fa83 	bl	80047b4 <RCCEx_PLLSAI1_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042b2:	e00c      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3320      	adds	r3, #32
 80042b8:	2100      	movs	r1, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fb6e 	bl	800499c <RCCEx_PLLSAI2_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042c4:	e003      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	74fb      	strb	r3, [r7, #19]
      break;
 80042ca:	e000      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80042cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ce:	7cfb      	ldrb	r3, [r7, #19]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10b      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042d4:	4b52      	ldr	r3, [pc, #328]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e2:	494f      	ldr	r1, [pc, #316]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042ea:	e001      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ec:	7cfb      	ldrb	r3, [r7, #19]
 80042ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80a0 	beq.w	800443e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042fe:	2300      	movs	r3, #0
 8004300:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004302:	4b47      	ldr	r3, [pc, #284]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004312:	2300      	movs	r3, #0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00d      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004318:	4b41      	ldr	r3, [pc, #260]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431c:	4a40      	ldr	r2, [pc, #256]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004322:	6593      	str	r3, [r2, #88]	; 0x58
 8004324:	4b3e      	ldr	r3, [pc, #248]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004330:	2301      	movs	r3, #1
 8004332:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004334:	4b3b      	ldr	r3, [pc, #236]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a3a      	ldr	r2, [pc, #232]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800433a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004340:	f7fc fe32 	bl	8000fa8 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004346:	e009      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004348:	f7fc fe2e 	bl	8000fa8 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d902      	bls.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	74fb      	strb	r3, [r7, #19]
        break;
 800435a:	e005      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800435c:	4b31      	ldr	r3, [pc, #196]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0ef      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d15c      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800436e:	4b2c      	ldr	r3, [pc, #176]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004378:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01f      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	429a      	cmp	r2, r3
 800438a:	d019      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800438c:	4b24      	ldr	r3, [pc, #144]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004396:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004398:	4b21      	ldr	r3, [pc, #132]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	4a20      	ldr	r2, [pc, #128]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043a8:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ae:	4a1c      	ldr	r2, [pc, #112]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043b8:	4a19      	ldr	r2, [pc, #100]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d016      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ca:	f7fc fded 	bl	8000fa8 <HAL_GetTick>
 80043ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d0:	e00b      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d2:	f7fc fde9 	bl	8000fa8 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d902      	bls.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	74fb      	strb	r3, [r7, #19]
            break;
 80043e8:	e006      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ea:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ec      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80043f8:	7cfb      	ldrb	r3, [r7, #19]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10c      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043fe:	4b08      	ldr	r3, [pc, #32]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800440e:	4904      	ldr	r1, [pc, #16]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004416:	e009      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004418:	7cfb      	ldrb	r3, [r7, #19]
 800441a:	74bb      	strb	r3, [r7, #18]
 800441c:	e006      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000
 8004424:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004428:	7cfb      	ldrb	r3, [r7, #19]
 800442a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800442c:	7c7b      	ldrb	r3, [r7, #17]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d105      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004432:	4b9e      	ldr	r3, [pc, #632]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004436:	4a9d      	ldr	r2, [pc, #628]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800444a:	4b98      	ldr	r3, [pc, #608]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004450:	f023 0203 	bic.w	r2, r3, #3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	4994      	ldr	r1, [pc, #592]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800446c:	4b8f      	ldr	r3, [pc, #572]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004472:	f023 020c 	bic.w	r2, r3, #12
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	498c      	ldr	r1, [pc, #560]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800448e:	4b87      	ldr	r3, [pc, #540]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004494:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	4983      	ldr	r1, [pc, #524]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044b0:	4b7e      	ldr	r3, [pc, #504]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	497b      	ldr	r1, [pc, #492]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044d2:	4b76      	ldr	r3, [pc, #472]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e0:	4972      	ldr	r1, [pc, #456]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044f4:	4b6d      	ldr	r3, [pc, #436]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004502:	496a      	ldr	r1, [pc, #424]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004516:	4b65      	ldr	r3, [pc, #404]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004524:	4961      	ldr	r1, [pc, #388]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004538:	4b5c      	ldr	r3, [pc, #368]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004546:	4959      	ldr	r1, [pc, #356]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800455a:	4b54      	ldr	r3, [pc, #336]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004560:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004568:	4950      	ldr	r1, [pc, #320]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800457c:	4b4b      	ldr	r3, [pc, #300]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004582:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458a:	4948      	ldr	r1, [pc, #288]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800459e:	4b43      	ldr	r3, [pc, #268]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ac:	493f      	ldr	r1, [pc, #252]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d028      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045c0:	4b3a      	ldr	r3, [pc, #232]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ce:	4937      	ldr	r1, [pc, #220]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045de:	d106      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045e0:	4b32      	ldr	r3, [pc, #200]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4a31      	ldr	r2, [pc, #196]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ea:	60d3      	str	r3, [r2, #12]
 80045ec:	e011      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045f6:	d10c      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	2101      	movs	r1, #1
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 f8d8 	bl	80047b4 <RCCEx_PLLSAI1_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800460e:	7cfb      	ldrb	r3, [r7, #19]
 8004610:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d028      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800461e:	4b23      	ldr	r3, [pc, #140]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462c:	491f      	ldr	r1, [pc, #124]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463c:	d106      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800463e:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	4a1a      	ldr	r2, [pc, #104]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004648:	60d3      	str	r3, [r2, #12]
 800464a:	e011      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004654:	d10c      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3304      	adds	r3, #4
 800465a:	2101      	movs	r1, #1
 800465c:	4618      	mov	r0, r3
 800465e:	f000 f8a9 	bl	80047b4 <RCCEx_PLLSAI1_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004666:	7cfb      	ldrb	r3, [r7, #19]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800466c:	7cfb      	ldrb	r3, [r7, #19]
 800466e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d02b      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468a:	4908      	ldr	r1, [pc, #32]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004696:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800469a:	d109      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800469c:	4b03      	ldr	r3, [pc, #12]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4a02      	ldr	r2, [pc, #8]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046a6:	60d3      	str	r3, [r2, #12]
 80046a8:	e014      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80046aa:	bf00      	nop
 80046ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046b8:	d10c      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3304      	adds	r3, #4
 80046be:	2101      	movs	r1, #1
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 f877 	bl	80047b4 <RCCEx_PLLSAI1_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ca:	7cfb      	ldrb	r3, [r7, #19]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d02f      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046e0:	4b2b      	ldr	r3, [pc, #172]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ee:	4928      	ldr	r1, [pc, #160]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046fe:	d10d      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3304      	adds	r3, #4
 8004704:	2102      	movs	r1, #2
 8004706:	4618      	mov	r0, r3
 8004708:	f000 f854 	bl	80047b4 <RCCEx_PLLSAI1_Config>
 800470c:	4603      	mov	r3, r0
 800470e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d014      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004716:	7cfb      	ldrb	r3, [r7, #19]
 8004718:	74bb      	strb	r3, [r7, #18]
 800471a:	e011      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004724:	d10c      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3320      	adds	r3, #32
 800472a:	2102      	movs	r1, #2
 800472c:	4618      	mov	r0, r3
 800472e:	f000 f935 	bl	800499c <RCCEx_PLLSAI2_Config>
 8004732:	4603      	mov	r3, r0
 8004734:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004736:	7cfb      	ldrb	r3, [r7, #19]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800473c:	7cfb      	ldrb	r3, [r7, #19]
 800473e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800474c:	4b10      	ldr	r3, [pc, #64]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800475a:	490d      	ldr	r1, [pc, #52]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00b      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800476e:	4b08      	ldr	r3, [pc, #32]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004774:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800477e:	4904      	ldr	r1, [pc, #16]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004786:	7cbb      	ldrb	r3, [r7, #18]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40021000 	.word	0x40021000

08004794 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800479e:	f043 0304 	orr.w	r3, r3, #4
 80047a2:	6013      	str	r3, [r2, #0]
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000

080047b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047c2:	4b75      	ldr	r3, [pc, #468]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d018      	beq.n	8004800 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047ce:	4b72      	ldr	r3, [pc, #456]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f003 0203 	and.w	r2, r3, #3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d10d      	bne.n	80047fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
       ||
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047e6:	4b6c      	ldr	r3, [pc, #432]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	091b      	lsrs	r3, r3, #4
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
       ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d047      	beq.n	800488a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	73fb      	strb	r3, [r7, #15]
 80047fe:	e044      	b.n	800488a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b03      	cmp	r3, #3
 8004806:	d018      	beq.n	800483a <RCCEx_PLLSAI1_Config+0x86>
 8004808:	2b03      	cmp	r3, #3
 800480a:	d825      	bhi.n	8004858 <RCCEx_PLLSAI1_Config+0xa4>
 800480c:	2b01      	cmp	r3, #1
 800480e:	d002      	beq.n	8004816 <RCCEx_PLLSAI1_Config+0x62>
 8004810:	2b02      	cmp	r3, #2
 8004812:	d009      	beq.n	8004828 <RCCEx_PLLSAI1_Config+0x74>
 8004814:	e020      	b.n	8004858 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004816:	4b60      	ldr	r3, [pc, #384]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d11d      	bne.n	800485e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004826:	e01a      	b.n	800485e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004828:	4b5b      	ldr	r3, [pc, #364]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004830:	2b00      	cmp	r3, #0
 8004832:	d116      	bne.n	8004862 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004838:	e013      	b.n	8004862 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800483a:	4b57      	ldr	r3, [pc, #348]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10f      	bne.n	8004866 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004846:	4b54      	ldr	r3, [pc, #336]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004856:	e006      	b.n	8004866 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
      break;
 800485c:	e004      	b.n	8004868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800485e:	bf00      	nop
 8004860:	e002      	b.n	8004868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004862:	bf00      	nop
 8004864:	e000      	b.n	8004868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004866:	bf00      	nop
    }

    if(status == HAL_OK)
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10d      	bne.n	800488a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800486e:	4b4a      	ldr	r3, [pc, #296]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6819      	ldr	r1, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	3b01      	subs	r3, #1
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	430b      	orrs	r3, r1
 8004884:	4944      	ldr	r1, [pc, #272]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004886:	4313      	orrs	r3, r2
 8004888:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d17d      	bne.n	800498c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004890:	4b41      	ldr	r3, [pc, #260]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a40      	ldr	r2, [pc, #256]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004896:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800489a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800489c:	f7fc fb84 	bl	8000fa8 <HAL_GetTick>
 80048a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048a2:	e009      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048a4:	f7fc fb80 	bl	8000fa8 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d902      	bls.n	80048b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	73fb      	strb	r3, [r7, #15]
        break;
 80048b6:	e005      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048b8:	4b37      	ldr	r3, [pc, #220]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1ef      	bne.n	80048a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d160      	bne.n	800498c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d111      	bne.n	80048f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048d0:	4b31      	ldr	r3, [pc, #196]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6892      	ldr	r2, [r2, #8]
 80048e0:	0211      	lsls	r1, r2, #8
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	68d2      	ldr	r2, [r2, #12]
 80048e6:	0912      	lsrs	r2, r2, #4
 80048e8:	0452      	lsls	r2, r2, #17
 80048ea:	430a      	orrs	r2, r1
 80048ec:	492a      	ldr	r1, [pc, #168]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	610b      	str	r3, [r1, #16]
 80048f2:	e027      	b.n	8004944 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d112      	bne.n	8004920 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048fa:	4b27      	ldr	r3, [pc, #156]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004902:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6892      	ldr	r2, [r2, #8]
 800490a:	0211      	lsls	r1, r2, #8
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6912      	ldr	r2, [r2, #16]
 8004910:	0852      	lsrs	r2, r2, #1
 8004912:	3a01      	subs	r2, #1
 8004914:	0552      	lsls	r2, r2, #21
 8004916:	430a      	orrs	r2, r1
 8004918:	491f      	ldr	r1, [pc, #124]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800491a:	4313      	orrs	r3, r2
 800491c:	610b      	str	r3, [r1, #16]
 800491e:	e011      	b.n	8004944 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004920:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004928:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6892      	ldr	r2, [r2, #8]
 8004930:	0211      	lsls	r1, r2, #8
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6952      	ldr	r2, [r2, #20]
 8004936:	0852      	lsrs	r2, r2, #1
 8004938:	3a01      	subs	r2, #1
 800493a:	0652      	lsls	r2, r2, #25
 800493c:	430a      	orrs	r2, r1
 800493e:	4916      	ldr	r1, [pc, #88]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004940:	4313      	orrs	r3, r2
 8004942:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004944:	4b14      	ldr	r3, [pc, #80]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a13      	ldr	r2, [pc, #76]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800494a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800494e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fc fb2a 	bl	8000fa8 <HAL_GetTick>
 8004954:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004956:	e009      	b.n	800496c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004958:	f7fc fb26 	bl	8000fa8 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d902      	bls.n	800496c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	73fb      	strb	r3, [r7, #15]
          break;
 800496a:	e005      	b.n	8004978 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800496c:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0ef      	beq.n	8004958 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	4904      	ldr	r1, [pc, #16]	; (8004998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004988:	4313      	orrs	r3, r2
 800498a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800498c:	7bfb      	ldrb	r3, [r7, #15]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000

0800499c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049aa:	4b6a      	ldr	r3, [pc, #424]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d018      	beq.n	80049e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049b6:	4b67      	ldr	r3, [pc, #412]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f003 0203 	and.w	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d10d      	bne.n	80049e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
       ||
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d009      	beq.n	80049e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80049ce:	4b61      	ldr	r3, [pc, #388]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	091b      	lsrs	r3, r3, #4
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
       ||
 80049de:	429a      	cmp	r2, r3
 80049e0:	d047      	beq.n	8004a72 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	73fb      	strb	r3, [r7, #15]
 80049e6:	e044      	b.n	8004a72 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d018      	beq.n	8004a22 <RCCEx_PLLSAI2_Config+0x86>
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d825      	bhi.n	8004a40 <RCCEx_PLLSAI2_Config+0xa4>
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d002      	beq.n	80049fe <RCCEx_PLLSAI2_Config+0x62>
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d009      	beq.n	8004a10 <RCCEx_PLLSAI2_Config+0x74>
 80049fc:	e020      	b.n	8004a40 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049fe:	4b55      	ldr	r3, [pc, #340]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d11d      	bne.n	8004a46 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a0e:	e01a      	b.n	8004a46 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a10:	4b50      	ldr	r3, [pc, #320]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d116      	bne.n	8004a4a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a20:	e013      	b.n	8004a4a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a22:	4b4c      	ldr	r3, [pc, #304]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10f      	bne.n	8004a4e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a2e:	4b49      	ldr	r3, [pc, #292]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a3e:	e006      	b.n	8004a4e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	73fb      	strb	r3, [r7, #15]
      break;
 8004a44:	e004      	b.n	8004a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a46:	bf00      	nop
 8004a48:	e002      	b.n	8004a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a4a:	bf00      	nop
 8004a4c:	e000      	b.n	8004a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10d      	bne.n	8004a72 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a56:	4b3f      	ldr	r3, [pc, #252]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6819      	ldr	r1, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	430b      	orrs	r3, r1
 8004a6c:	4939      	ldr	r1, [pc, #228]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d167      	bne.n	8004b48 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a78:	4b36      	ldr	r3, [pc, #216]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a35      	ldr	r2, [pc, #212]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a84:	f7fc fa90 	bl	8000fa8 <HAL_GetTick>
 8004a88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a8a:	e009      	b.n	8004aa0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a8c:	f7fc fa8c 	bl	8000fa8 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d902      	bls.n	8004aa0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a9e:	e005      	b.n	8004aac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004aa0:	4b2c      	ldr	r3, [pc, #176]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1ef      	bne.n	8004a8c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d14a      	bne.n	8004b48 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d111      	bne.n	8004adc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ab8:	4b26      	ldr	r3, [pc, #152]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6892      	ldr	r2, [r2, #8]
 8004ac8:	0211      	lsls	r1, r2, #8
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68d2      	ldr	r2, [r2, #12]
 8004ace:	0912      	lsrs	r2, r2, #4
 8004ad0:	0452      	lsls	r2, r2, #17
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	491f      	ldr	r1, [pc, #124]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	614b      	str	r3, [r1, #20]
 8004ada:	e011      	b.n	8004b00 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004adc:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ae4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6892      	ldr	r2, [r2, #8]
 8004aec:	0211      	lsls	r1, r2, #8
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6912      	ldr	r2, [r2, #16]
 8004af2:	0852      	lsrs	r2, r2, #1
 8004af4:	3a01      	subs	r2, #1
 8004af6:	0652      	lsls	r2, r2, #25
 8004af8:	430a      	orrs	r2, r1
 8004afa:	4916      	ldr	r1, [pc, #88]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b00:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0c:	f7fc fa4c 	bl	8000fa8 <HAL_GetTick>
 8004b10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b12:	e009      	b.n	8004b28 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b14:	f7fc fa48 	bl	8000fa8 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d902      	bls.n	8004b28 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	73fb      	strb	r3, [r7, #15]
          break;
 8004b26:	e005      	b.n	8004b34 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b28:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0ef      	beq.n	8004b14 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3c:	695a      	ldr	r2, [r3, #20]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	4904      	ldr	r1, [pc, #16]	; (8004b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40021000 	.word	0x40021000

08004b58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e040      	b.n	8004bec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc f898 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2224      	movs	r2, #36	; 0x24
 8004b84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0201 	bic.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fc94 	bl	80054c4 <UART_SetConfig>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e022      	b.n	8004bec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 ff12 	bl	80059d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 ff99 	bl	8005b1c <UART_CheckIdleState>
 8004bea:	4603      	mov	r3, r0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	; 0x28
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	f040 8082 	bne.w	8004d12 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <HAL_UART_Transmit+0x26>
 8004c14:	88fb      	ldrh	r3, [r7, #6]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e07a      	b.n	8004d14 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_UART_Transmit+0x38>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e073      	b.n	8004d14 <HAL_UART_Transmit+0x120>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2221      	movs	r2, #33	; 0x21
 8004c40:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c42:	f7fc f9b1 	bl	8000fa8 <HAL_GetTick>
 8004c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	88fa      	ldrh	r2, [r7, #6]
 8004c4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	88fa      	ldrh	r2, [r7, #6]
 8004c54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c60:	d108      	bne.n	8004c74 <HAL_UART_Transmit+0x80>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d104      	bne.n	8004c74 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	e003      	b.n	8004c7c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c84:	e02d      	b.n	8004ce2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2180      	movs	r1, #128	; 0x80
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 ff8c 	bl	8005bae <UART_WaitOnFlagUntilTimeout>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e039      	b.n	8004d14 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	881a      	ldrh	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cb2:	b292      	uxth	r2, r2
 8004cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	3302      	adds	r3, #2
 8004cba:	61bb      	str	r3, [r7, #24]
 8004cbc:	e008      	b.n	8004cd0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	781a      	ldrb	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	b292      	uxth	r2, r2
 8004cc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1cb      	bne.n	8004c86 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2140      	movs	r1, #64	; 0x40
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 ff58 	bl	8005bae <UART_WaitOnFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e005      	b.n	8004d14 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e000      	b.n	8004d14 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004d12:	2302      	movs	r3, #2
  }
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3720      	adds	r7, #32
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	; 0x28
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	f040 80bf 	bne.w	8004eb4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_UART_Receive+0x26>
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e0b7      	b.n	8004eb6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_UART_Receive+0x38>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e0b0      	b.n	8004eb6 <HAL_UART_Receive+0x19a>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2222      	movs	r2, #34	; 0x22
 8004d68:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d70:	f7fc f91a 	bl	8000fa8 <HAL_GetTick>
 8004d74:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	88fa      	ldrh	r2, [r7, #6]
 8004d7a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	88fa      	ldrh	r2, [r7, #6]
 8004d82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8e:	d10e      	bne.n	8004dae <HAL_UART_Receive+0x92>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d105      	bne.n	8004da4 <HAL_UART_Receive+0x88>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004da2:	e02d      	b.n	8004e00 <HAL_UART_Receive+0xe4>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	22ff      	movs	r2, #255	; 0xff
 8004da8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dac:	e028      	b.n	8004e00 <HAL_UART_Receive+0xe4>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10d      	bne.n	8004dd2 <HAL_UART_Receive+0xb6>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <HAL_UART_Receive+0xac>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	22ff      	movs	r2, #255	; 0xff
 8004dc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dc6:	e01b      	b.n	8004e00 <HAL_UART_Receive+0xe4>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	227f      	movs	r2, #127	; 0x7f
 8004dcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dd0:	e016      	b.n	8004e00 <HAL_UART_Receive+0xe4>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dda:	d10d      	bne.n	8004df8 <HAL_UART_Receive+0xdc>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d104      	bne.n	8004dee <HAL_UART_Receive+0xd2>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	227f      	movs	r2, #127	; 0x7f
 8004de8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dec:	e008      	b.n	8004e00 <HAL_UART_Receive+0xe4>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	223f      	movs	r2, #63	; 0x3f
 8004df2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004df6:	e003      	b.n	8004e00 <HAL_UART_Receive+0xe4>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e06:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e10:	d108      	bne.n	8004e24 <HAL_UART_Receive+0x108>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d104      	bne.n	8004e24 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	e003      	b.n	8004e2c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e34:	e033      	b.n	8004e9e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2120      	movs	r1, #32
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 feb4 	bl	8005bae <UART_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e032      	b.n	8004eb6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10c      	bne.n	8004e70 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	8a7b      	ldrh	r3, [r7, #18]
 8004e60:	4013      	ands	r3, r2
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	3302      	adds	r3, #2
 8004e6c:	61bb      	str	r3, [r7, #24]
 8004e6e:	e00d      	b.n	8004e8c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	8a7b      	ldrh	r3, [r7, #18]
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	4013      	ands	r3, r2
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1c5      	bne.n	8004e36 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2220      	movs	r2, #32
 8004eae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e000      	b.n	8004eb6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004eb4:	2302      	movs	r3, #2
  }
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b0ba      	sub	sp, #232	; 0xe8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ee6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004eea:	f640 030f 	movw	r3, #2063	; 0x80f
 8004eee:	4013      	ands	r3, r2
 8004ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d115      	bne.n	8004f28 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00f      	beq.n	8004f28 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d009      	beq.n	8004f28 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 82a6 	beq.w	800546a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	4798      	blx	r3
      }
      return;
 8004f26:	e2a0      	b.n	800546a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004f28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 8117 	beq.w	8005160 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f42:	4b85      	ldr	r3, [pc, #532]	; (8005158 <HAL_UART_IRQHandler+0x298>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 810a 	beq.w	8005160 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d011      	beq.n	8004f7c <HAL_UART_IRQHandler+0xbc>
 8004f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00b      	beq.n	8004f7c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f72:	f043 0201 	orr.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d011      	beq.n	8004fac <HAL_UART_IRQHandler+0xec>
 8004f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fa2:	f043 0204 	orr.w	r2, r3, #4
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d011      	beq.n	8004fdc <HAL_UART_IRQHandler+0x11c>
 8004fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00b      	beq.n	8004fdc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2204      	movs	r2, #4
 8004fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fd2:	f043 0202 	orr.w	r2, r3, #2
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d017      	beq.n	8005018 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fec:	f003 0320 	and.w	r3, r3, #32
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d105      	bne.n	8005000 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ff8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00b      	beq.n	8005018 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2208      	movs	r2, #8
 8005006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800500e:	f043 0208 	orr.w	r2, r3, #8
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005020:	2b00      	cmp	r3, #0
 8005022:	d012      	beq.n	800504a <HAL_UART_IRQHandler+0x18a>
 8005024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005028:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00c      	beq.n	800504a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005038:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005040:	f043 0220 	orr.w	r2, r3, #32
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 820c 	beq.w	800546e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00d      	beq.n	800507e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005066:	f003 0320 	and.w	r3, r3, #32
 800506a:	2b00      	cmp	r3, #0
 800506c:	d007      	beq.n	800507e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005084:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005092:	2b40      	cmp	r3, #64	; 0x40
 8005094:	d005      	beq.n	80050a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800509a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d04f      	beq.n	8005142 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fe47 	bl	8005d36 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b2:	2b40      	cmp	r3, #64	; 0x40
 80050b4:	d141      	bne.n	800513a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3308      	adds	r3, #8
 80050bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3308      	adds	r3, #8
 80050de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1d9      	bne.n	80050b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005106:	2b00      	cmp	r3, #0
 8005108:	d013      	beq.n	8005132 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	4a13      	ldr	r2, [pc, #76]	; (800515c <HAL_UART_IRQHandler+0x29c>)
 8005110:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	4618      	mov	r0, r3
 8005118:	f7fd fefe 	bl	8002f18 <HAL_DMA_Abort_IT>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d017      	beq.n	8005152 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800512c:	4610      	mov	r0, r2
 800512e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005130:	e00f      	b.n	8005152 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f9b0 	bl	8005498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005138:	e00b      	b.n	8005152 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f9ac 	bl	8005498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005140:	e007      	b.n	8005152 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f9a8 	bl	8005498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005150:	e18d      	b.n	800546e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005152:	bf00      	nop
    return;
 8005154:	e18b      	b.n	800546e <HAL_UART_IRQHandler+0x5ae>
 8005156:	bf00      	nop
 8005158:	04000120 	.word	0x04000120
 800515c:	08005dfd 	.word	0x08005dfd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005164:	2b01      	cmp	r3, #1
 8005166:	f040 8146 	bne.w	80053f6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800516a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516e:	f003 0310 	and.w	r3, r3, #16
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 813f 	beq.w	80053f6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 8138 	beq.w	80053f6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2210      	movs	r2, #16
 800518c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005198:	2b40      	cmp	r3, #64	; 0x40
 800519a:	f040 80b4 	bne.w	8005306 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 815f 	beq.w	8005472 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051be:	429a      	cmp	r2, r3
 80051c0:	f080 8157 	bcs.w	8005472 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f040 8085 	bne.w	80052ea <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800520a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800520e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005216:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005222:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1da      	bne.n	80051e0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3308      	adds	r3, #8
 8005230:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800523a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800523c:	f023 0301 	bic.w	r3, r3, #1
 8005240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	3308      	adds	r3, #8
 800524a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800524e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005252:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005256:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e1      	bne.n	800522a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3308      	adds	r3, #8
 800526c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800527c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3308      	adds	r3, #8
 8005286:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800528a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800528c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005290:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005292:	e841 2300 	strex	r3, r2, [r1]
 8005296:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e3      	bne.n	8005266 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ba:	f023 0310 	bic.w	r3, r3, #16
 80052be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80052ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e4      	bne.n	80052aa <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fd fdd9 	bl	8002e9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	4619      	mov	r1, r3
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f8d4 	bl	80054ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005304:	e0b5      	b.n	8005472 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005312:	b29b      	uxth	r3, r3
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 80a7 	beq.w	8005476 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 80a2 	beq.w	8005476 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533a:	e853 3f00 	ldrex	r3, [r3]
 800533e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005342:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005346:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005354:	647b      	str	r3, [r7, #68]	; 0x44
 8005356:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800535a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e4      	bne.n	8005332 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3308      	adds	r3, #8
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	623b      	str	r3, [r7, #32]
   return(result);
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	f023 0301 	bic.w	r3, r3, #1
 800537e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3308      	adds	r3, #8
 8005388:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800538c:	633a      	str	r2, [r7, #48]	; 0x30
 800538e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005390:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005394:	e841 2300 	strex	r3, r2, [r1]
 8005398:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800539a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e3      	bne.n	8005368 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2220      	movs	r2, #32
 80053a4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	60fb      	str	r3, [r7, #12]
   return(result);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0310 	bic.w	r3, r3, #16
 80053c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053d4:	61fb      	str	r3, [r7, #28]
 80053d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	69b9      	ldr	r1, [r7, #24]
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	617b      	str	r3, [r7, #20]
   return(result);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e4      	bne.n	80053b2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053ec:	4619      	mov	r1, r3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f85c 	bl	80054ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053f4:	e03f      	b.n	8005476 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00e      	beq.n	8005420 <HAL_UART_IRQHandler+0x560>
 8005402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d008      	beq.n	8005420 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005416:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fd2f 	bl	8005e7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800541e:	e02d      	b.n	800547c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00e      	beq.n	800544a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800542c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005434:	2b00      	cmp	r3, #0
 8005436:	d008      	beq.n	800544a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01c      	beq.n	800547a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	4798      	blx	r3
    }
    return;
 8005448:	e017      	b.n	800547a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800544a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d012      	beq.n	800547c <HAL_UART_IRQHandler+0x5bc>
 8005456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800545a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00c      	beq.n	800547c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fce0 	bl	8005e28 <UART_EndTransmit_IT>
    return;
 8005468:	e008      	b.n	800547c <HAL_UART_IRQHandler+0x5bc>
      return;
 800546a:	bf00      	nop
 800546c:	e006      	b.n	800547c <HAL_UART_IRQHandler+0x5bc>
    return;
 800546e:	bf00      	nop
 8005470:	e004      	b.n	800547c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005472:	bf00      	nop
 8005474:	e002      	b.n	800547c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005476:	bf00      	nop
 8005478:	e000      	b.n	800547c <HAL_UART_IRQHandler+0x5bc>
    return;
 800547a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800547c:	37e8      	adds	r7, #232	; 0xe8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop

08005484 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	460b      	mov	r3, r1
 80054b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054c4:	b5b0      	push	{r4, r5, r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4bad      	ldr	r3, [pc, #692]	; (80057a4 <UART_SetConfig+0x2e0>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	69f9      	ldr	r1, [r7, #28]
 80054f8:	430b      	orrs	r3, r1
 80054fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4aa2      	ldr	r2, [pc, #648]	; (80057a8 <UART_SetConfig+0x2e4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d004      	beq.n	800552c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	4313      	orrs	r3, r2
 800552a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	430a      	orrs	r2, r1
 800553e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a99      	ldr	r2, [pc, #612]	; (80057ac <UART_SetConfig+0x2e8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d121      	bne.n	800558e <UART_SetConfig+0xca>
 800554a:	4b99      	ldr	r3, [pc, #612]	; (80057b0 <UART_SetConfig+0x2ec>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	2b03      	cmp	r3, #3
 8005556:	d817      	bhi.n	8005588 <UART_SetConfig+0xc4>
 8005558:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <UART_SetConfig+0x9c>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	08005571 	.word	0x08005571
 8005564:	0800557d 	.word	0x0800557d
 8005568:	08005577 	.word	0x08005577
 800556c:	08005583 	.word	0x08005583
 8005570:	2301      	movs	r3, #1
 8005572:	76fb      	strb	r3, [r7, #27]
 8005574:	e0e7      	b.n	8005746 <UART_SetConfig+0x282>
 8005576:	2302      	movs	r3, #2
 8005578:	76fb      	strb	r3, [r7, #27]
 800557a:	e0e4      	b.n	8005746 <UART_SetConfig+0x282>
 800557c:	2304      	movs	r3, #4
 800557e:	76fb      	strb	r3, [r7, #27]
 8005580:	e0e1      	b.n	8005746 <UART_SetConfig+0x282>
 8005582:	2308      	movs	r3, #8
 8005584:	76fb      	strb	r3, [r7, #27]
 8005586:	e0de      	b.n	8005746 <UART_SetConfig+0x282>
 8005588:	2310      	movs	r3, #16
 800558a:	76fb      	strb	r3, [r7, #27]
 800558c:	e0db      	b.n	8005746 <UART_SetConfig+0x282>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a88      	ldr	r2, [pc, #544]	; (80057b4 <UART_SetConfig+0x2f0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d132      	bne.n	80055fe <UART_SetConfig+0x13a>
 8005598:	4b85      	ldr	r3, [pc, #532]	; (80057b0 <UART_SetConfig+0x2ec>)
 800559a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559e:	f003 030c 	and.w	r3, r3, #12
 80055a2:	2b0c      	cmp	r3, #12
 80055a4:	d828      	bhi.n	80055f8 <UART_SetConfig+0x134>
 80055a6:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <UART_SetConfig+0xe8>)
 80055a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ac:	080055e1 	.word	0x080055e1
 80055b0:	080055f9 	.word	0x080055f9
 80055b4:	080055f9 	.word	0x080055f9
 80055b8:	080055f9 	.word	0x080055f9
 80055bc:	080055ed 	.word	0x080055ed
 80055c0:	080055f9 	.word	0x080055f9
 80055c4:	080055f9 	.word	0x080055f9
 80055c8:	080055f9 	.word	0x080055f9
 80055cc:	080055e7 	.word	0x080055e7
 80055d0:	080055f9 	.word	0x080055f9
 80055d4:	080055f9 	.word	0x080055f9
 80055d8:	080055f9 	.word	0x080055f9
 80055dc:	080055f3 	.word	0x080055f3
 80055e0:	2300      	movs	r3, #0
 80055e2:	76fb      	strb	r3, [r7, #27]
 80055e4:	e0af      	b.n	8005746 <UART_SetConfig+0x282>
 80055e6:	2302      	movs	r3, #2
 80055e8:	76fb      	strb	r3, [r7, #27]
 80055ea:	e0ac      	b.n	8005746 <UART_SetConfig+0x282>
 80055ec:	2304      	movs	r3, #4
 80055ee:	76fb      	strb	r3, [r7, #27]
 80055f0:	e0a9      	b.n	8005746 <UART_SetConfig+0x282>
 80055f2:	2308      	movs	r3, #8
 80055f4:	76fb      	strb	r3, [r7, #27]
 80055f6:	e0a6      	b.n	8005746 <UART_SetConfig+0x282>
 80055f8:	2310      	movs	r3, #16
 80055fa:	76fb      	strb	r3, [r7, #27]
 80055fc:	e0a3      	b.n	8005746 <UART_SetConfig+0x282>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a6d      	ldr	r2, [pc, #436]	; (80057b8 <UART_SetConfig+0x2f4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d120      	bne.n	800564a <UART_SetConfig+0x186>
 8005608:	4b69      	ldr	r3, [pc, #420]	; (80057b0 <UART_SetConfig+0x2ec>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005612:	2b30      	cmp	r3, #48	; 0x30
 8005614:	d013      	beq.n	800563e <UART_SetConfig+0x17a>
 8005616:	2b30      	cmp	r3, #48	; 0x30
 8005618:	d814      	bhi.n	8005644 <UART_SetConfig+0x180>
 800561a:	2b20      	cmp	r3, #32
 800561c:	d009      	beq.n	8005632 <UART_SetConfig+0x16e>
 800561e:	2b20      	cmp	r3, #32
 8005620:	d810      	bhi.n	8005644 <UART_SetConfig+0x180>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <UART_SetConfig+0x168>
 8005626:	2b10      	cmp	r3, #16
 8005628:	d006      	beq.n	8005638 <UART_SetConfig+0x174>
 800562a:	e00b      	b.n	8005644 <UART_SetConfig+0x180>
 800562c:	2300      	movs	r3, #0
 800562e:	76fb      	strb	r3, [r7, #27]
 8005630:	e089      	b.n	8005746 <UART_SetConfig+0x282>
 8005632:	2302      	movs	r3, #2
 8005634:	76fb      	strb	r3, [r7, #27]
 8005636:	e086      	b.n	8005746 <UART_SetConfig+0x282>
 8005638:	2304      	movs	r3, #4
 800563a:	76fb      	strb	r3, [r7, #27]
 800563c:	e083      	b.n	8005746 <UART_SetConfig+0x282>
 800563e:	2308      	movs	r3, #8
 8005640:	76fb      	strb	r3, [r7, #27]
 8005642:	e080      	b.n	8005746 <UART_SetConfig+0x282>
 8005644:	2310      	movs	r3, #16
 8005646:	76fb      	strb	r3, [r7, #27]
 8005648:	e07d      	b.n	8005746 <UART_SetConfig+0x282>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a5b      	ldr	r2, [pc, #364]	; (80057bc <UART_SetConfig+0x2f8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d120      	bne.n	8005696 <UART_SetConfig+0x1d2>
 8005654:	4b56      	ldr	r3, [pc, #344]	; (80057b0 <UART_SetConfig+0x2ec>)
 8005656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800565e:	2bc0      	cmp	r3, #192	; 0xc0
 8005660:	d013      	beq.n	800568a <UART_SetConfig+0x1c6>
 8005662:	2bc0      	cmp	r3, #192	; 0xc0
 8005664:	d814      	bhi.n	8005690 <UART_SetConfig+0x1cc>
 8005666:	2b80      	cmp	r3, #128	; 0x80
 8005668:	d009      	beq.n	800567e <UART_SetConfig+0x1ba>
 800566a:	2b80      	cmp	r3, #128	; 0x80
 800566c:	d810      	bhi.n	8005690 <UART_SetConfig+0x1cc>
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <UART_SetConfig+0x1b4>
 8005672:	2b40      	cmp	r3, #64	; 0x40
 8005674:	d006      	beq.n	8005684 <UART_SetConfig+0x1c0>
 8005676:	e00b      	b.n	8005690 <UART_SetConfig+0x1cc>
 8005678:	2300      	movs	r3, #0
 800567a:	76fb      	strb	r3, [r7, #27]
 800567c:	e063      	b.n	8005746 <UART_SetConfig+0x282>
 800567e:	2302      	movs	r3, #2
 8005680:	76fb      	strb	r3, [r7, #27]
 8005682:	e060      	b.n	8005746 <UART_SetConfig+0x282>
 8005684:	2304      	movs	r3, #4
 8005686:	76fb      	strb	r3, [r7, #27]
 8005688:	e05d      	b.n	8005746 <UART_SetConfig+0x282>
 800568a:	2308      	movs	r3, #8
 800568c:	76fb      	strb	r3, [r7, #27]
 800568e:	e05a      	b.n	8005746 <UART_SetConfig+0x282>
 8005690:	2310      	movs	r3, #16
 8005692:	76fb      	strb	r3, [r7, #27]
 8005694:	e057      	b.n	8005746 <UART_SetConfig+0x282>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a49      	ldr	r2, [pc, #292]	; (80057c0 <UART_SetConfig+0x2fc>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d125      	bne.n	80056ec <UART_SetConfig+0x228>
 80056a0:	4b43      	ldr	r3, [pc, #268]	; (80057b0 <UART_SetConfig+0x2ec>)
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ae:	d017      	beq.n	80056e0 <UART_SetConfig+0x21c>
 80056b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b4:	d817      	bhi.n	80056e6 <UART_SetConfig+0x222>
 80056b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ba:	d00b      	beq.n	80056d4 <UART_SetConfig+0x210>
 80056bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c0:	d811      	bhi.n	80056e6 <UART_SetConfig+0x222>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <UART_SetConfig+0x20a>
 80056c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ca:	d006      	beq.n	80056da <UART_SetConfig+0x216>
 80056cc:	e00b      	b.n	80056e6 <UART_SetConfig+0x222>
 80056ce:	2300      	movs	r3, #0
 80056d0:	76fb      	strb	r3, [r7, #27]
 80056d2:	e038      	b.n	8005746 <UART_SetConfig+0x282>
 80056d4:	2302      	movs	r3, #2
 80056d6:	76fb      	strb	r3, [r7, #27]
 80056d8:	e035      	b.n	8005746 <UART_SetConfig+0x282>
 80056da:	2304      	movs	r3, #4
 80056dc:	76fb      	strb	r3, [r7, #27]
 80056de:	e032      	b.n	8005746 <UART_SetConfig+0x282>
 80056e0:	2308      	movs	r3, #8
 80056e2:	76fb      	strb	r3, [r7, #27]
 80056e4:	e02f      	b.n	8005746 <UART_SetConfig+0x282>
 80056e6:	2310      	movs	r3, #16
 80056e8:	76fb      	strb	r3, [r7, #27]
 80056ea:	e02c      	b.n	8005746 <UART_SetConfig+0x282>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a2d      	ldr	r2, [pc, #180]	; (80057a8 <UART_SetConfig+0x2e4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d125      	bne.n	8005742 <UART_SetConfig+0x27e>
 80056f6:	4b2e      	ldr	r3, [pc, #184]	; (80057b0 <UART_SetConfig+0x2ec>)
 80056f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005700:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005704:	d017      	beq.n	8005736 <UART_SetConfig+0x272>
 8005706:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800570a:	d817      	bhi.n	800573c <UART_SetConfig+0x278>
 800570c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005710:	d00b      	beq.n	800572a <UART_SetConfig+0x266>
 8005712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005716:	d811      	bhi.n	800573c <UART_SetConfig+0x278>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <UART_SetConfig+0x260>
 800571c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005720:	d006      	beq.n	8005730 <UART_SetConfig+0x26c>
 8005722:	e00b      	b.n	800573c <UART_SetConfig+0x278>
 8005724:	2300      	movs	r3, #0
 8005726:	76fb      	strb	r3, [r7, #27]
 8005728:	e00d      	b.n	8005746 <UART_SetConfig+0x282>
 800572a:	2302      	movs	r3, #2
 800572c:	76fb      	strb	r3, [r7, #27]
 800572e:	e00a      	b.n	8005746 <UART_SetConfig+0x282>
 8005730:	2304      	movs	r3, #4
 8005732:	76fb      	strb	r3, [r7, #27]
 8005734:	e007      	b.n	8005746 <UART_SetConfig+0x282>
 8005736:	2308      	movs	r3, #8
 8005738:	76fb      	strb	r3, [r7, #27]
 800573a:	e004      	b.n	8005746 <UART_SetConfig+0x282>
 800573c:	2310      	movs	r3, #16
 800573e:	76fb      	strb	r3, [r7, #27]
 8005740:	e001      	b.n	8005746 <UART_SetConfig+0x282>
 8005742:	2310      	movs	r3, #16
 8005744:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <UART_SetConfig+0x2e4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	f040 8087 	bne.w	8005860 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005752:	7efb      	ldrb	r3, [r7, #27]
 8005754:	2b08      	cmp	r3, #8
 8005756:	d837      	bhi.n	80057c8 <UART_SetConfig+0x304>
 8005758:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <UART_SetConfig+0x29c>)
 800575a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575e:	bf00      	nop
 8005760:	08005785 	.word	0x08005785
 8005764:	080057c9 	.word	0x080057c9
 8005768:	0800578d 	.word	0x0800578d
 800576c:	080057c9 	.word	0x080057c9
 8005770:	08005793 	.word	0x08005793
 8005774:	080057c9 	.word	0x080057c9
 8005778:	080057c9 	.word	0x080057c9
 800577c:	080057c9 	.word	0x080057c9
 8005780:	0800579b 	.word	0x0800579b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005784:	f7fe fc90 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8005788:	6178      	str	r0, [r7, #20]
        break;
 800578a:	e022      	b.n	80057d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800578c:	4b0d      	ldr	r3, [pc, #52]	; (80057c4 <UART_SetConfig+0x300>)
 800578e:	617b      	str	r3, [r7, #20]
        break;
 8005790:	e01f      	b.n	80057d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005792:	f7fe fbf1 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8005796:	6178      	str	r0, [r7, #20]
        break;
 8005798:	e01b      	b.n	80057d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800579e:	617b      	str	r3, [r7, #20]
        break;
 80057a0:	e017      	b.n	80057d2 <UART_SetConfig+0x30e>
 80057a2:	bf00      	nop
 80057a4:	efff69f3 	.word	0xefff69f3
 80057a8:	40008000 	.word	0x40008000
 80057ac:	40013800 	.word	0x40013800
 80057b0:	40021000 	.word	0x40021000
 80057b4:	40004400 	.word	0x40004400
 80057b8:	40004800 	.word	0x40004800
 80057bc:	40004c00 	.word	0x40004c00
 80057c0:	40005000 	.word	0x40005000
 80057c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	76bb      	strb	r3, [r7, #26]
        break;
 80057d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80f1 	beq.w	80059bc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	4613      	mov	r3, r2
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	4413      	add	r3, r2
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d305      	bcc.n	80057f6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d902      	bls.n	80057fc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	76bb      	strb	r3, [r7, #26]
 80057fa:	e0df      	b.n	80059bc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	4618      	mov	r0, r3
 8005800:	f04f 0100 	mov.w	r1, #0
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	020b      	lsls	r3, r1, #8
 800580e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005812:	0202      	lsls	r2, r0, #8
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	6849      	ldr	r1, [r1, #4]
 8005818:	0849      	lsrs	r1, r1, #1
 800581a:	4608      	mov	r0, r1
 800581c:	f04f 0100 	mov.w	r1, #0
 8005820:	1814      	adds	r4, r2, r0
 8005822:	eb43 0501 	adc.w	r5, r3, r1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	461a      	mov	r2, r3
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	4620      	mov	r0, r4
 8005832:	4629      	mov	r1, r5
 8005834:	f7fa fd24 	bl	8000280 <__aeabi_uldivmod>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4613      	mov	r3, r2
 800583e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005846:	d308      	bcc.n	800585a <UART_SetConfig+0x396>
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800584e:	d204      	bcs.n	800585a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	60da      	str	r2, [r3, #12]
 8005858:	e0b0      	b.n	80059bc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	76bb      	strb	r3, [r7, #26]
 800585e:	e0ad      	b.n	80059bc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005868:	d15b      	bne.n	8005922 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800586a:	7efb      	ldrb	r3, [r7, #27]
 800586c:	2b08      	cmp	r3, #8
 800586e:	d828      	bhi.n	80058c2 <UART_SetConfig+0x3fe>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <UART_SetConfig+0x3b4>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	0800589d 	.word	0x0800589d
 800587c:	080058a5 	.word	0x080058a5
 8005880:	080058ad 	.word	0x080058ad
 8005884:	080058c3 	.word	0x080058c3
 8005888:	080058b3 	.word	0x080058b3
 800588c:	080058c3 	.word	0x080058c3
 8005890:	080058c3 	.word	0x080058c3
 8005894:	080058c3 	.word	0x080058c3
 8005898:	080058bb 	.word	0x080058bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800589c:	f7fe fc04 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 80058a0:	6178      	str	r0, [r7, #20]
        break;
 80058a2:	e013      	b.n	80058cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058a4:	f7fe fc16 	bl	80040d4 <HAL_RCC_GetPCLK2Freq>
 80058a8:	6178      	str	r0, [r7, #20]
        break;
 80058aa:	e00f      	b.n	80058cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058ac:	4b49      	ldr	r3, [pc, #292]	; (80059d4 <UART_SetConfig+0x510>)
 80058ae:	617b      	str	r3, [r7, #20]
        break;
 80058b0:	e00c      	b.n	80058cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058b2:	f7fe fb61 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 80058b6:	6178      	str	r0, [r7, #20]
        break;
 80058b8:	e008      	b.n	80058cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058be:	617b      	str	r3, [r7, #20]
        break;
 80058c0:	e004      	b.n	80058cc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	76bb      	strb	r3, [r7, #26]
        break;
 80058ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d074      	beq.n	80059bc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	005a      	lsls	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	441a      	add	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	2b0f      	cmp	r3, #15
 80058ec:	d916      	bls.n	800591c <UART_SetConfig+0x458>
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f4:	d212      	bcs.n	800591c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	f023 030f 	bic.w	r3, r3, #15
 80058fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	085b      	lsrs	r3, r3, #1
 8005904:	b29b      	uxth	r3, r3
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	b29a      	uxth	r2, r3
 800590c:	89fb      	ldrh	r3, [r7, #14]
 800590e:	4313      	orrs	r3, r2
 8005910:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	89fa      	ldrh	r2, [r7, #14]
 8005918:	60da      	str	r2, [r3, #12]
 800591a:	e04f      	b.n	80059bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	76bb      	strb	r3, [r7, #26]
 8005920:	e04c      	b.n	80059bc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005922:	7efb      	ldrb	r3, [r7, #27]
 8005924:	2b08      	cmp	r3, #8
 8005926:	d828      	bhi.n	800597a <UART_SetConfig+0x4b6>
 8005928:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <UART_SetConfig+0x46c>)
 800592a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592e:	bf00      	nop
 8005930:	08005955 	.word	0x08005955
 8005934:	0800595d 	.word	0x0800595d
 8005938:	08005965 	.word	0x08005965
 800593c:	0800597b 	.word	0x0800597b
 8005940:	0800596b 	.word	0x0800596b
 8005944:	0800597b 	.word	0x0800597b
 8005948:	0800597b 	.word	0x0800597b
 800594c:	0800597b 	.word	0x0800597b
 8005950:	08005973 	.word	0x08005973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005954:	f7fe fba8 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8005958:	6178      	str	r0, [r7, #20]
        break;
 800595a:	e013      	b.n	8005984 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800595c:	f7fe fbba 	bl	80040d4 <HAL_RCC_GetPCLK2Freq>
 8005960:	6178      	str	r0, [r7, #20]
        break;
 8005962:	e00f      	b.n	8005984 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005964:	4b1b      	ldr	r3, [pc, #108]	; (80059d4 <UART_SetConfig+0x510>)
 8005966:	617b      	str	r3, [r7, #20]
        break;
 8005968:	e00c      	b.n	8005984 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800596a:	f7fe fb05 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 800596e:	6178      	str	r0, [r7, #20]
        break;
 8005970:	e008      	b.n	8005984 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005976:	617b      	str	r3, [r7, #20]
        break;
 8005978:	e004      	b.n	8005984 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	76bb      	strb	r3, [r7, #26]
        break;
 8005982:	bf00      	nop
    }

    if (pclk != 0U)
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d018      	beq.n	80059bc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	085a      	lsrs	r2, r3, #1
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	441a      	add	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	fbb2 f3f3 	udiv	r3, r2, r3
 800599c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	2b0f      	cmp	r3, #15
 80059a2:	d909      	bls.n	80059b8 <UART_SetConfig+0x4f4>
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059aa:	d205      	bcs.n	80059b8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	60da      	str	r2, [r3, #12]
 80059b6:	e001      	b.n	80059bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80059c8:	7ebb      	ldrb	r3, [r7, #26]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3720      	adds	r7, #32
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bdb0      	pop	{r4, r5, r7, pc}
 80059d2:	bf00      	nop
 80059d4:	00f42400 	.word	0x00f42400

080059d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01a      	beq.n	8005aee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ad6:	d10a      	bne.n	8005aee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	605a      	str	r2, [r3, #4]
  }
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b2c:	f7fb fa3c 	bl	8000fa8 <HAL_GetTick>
 8005b30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d10e      	bne.n	8005b5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f82d 	bl	8005bae <UART_WaitOnFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e023      	b.n	8005ba6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d10e      	bne.n	8005b8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f817 	bl	8005bae <UART_WaitOnFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e00d      	b.n	8005ba6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b09c      	sub	sp, #112	; 0x70
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	603b      	str	r3, [r7, #0]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bbe:	e0a5      	b.n	8005d0c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc6:	f000 80a1 	beq.w	8005d0c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bca:	f7fb f9ed 	bl	8000fa8 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d302      	bcc.n	8005be0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d13e      	bne.n	8005c5e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bf4:	667b      	str	r3, [r7, #100]	; 0x64
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e6      	bne.n	8005be0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3308      	adds	r3, #8
 8005c18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c24:	f023 0301 	bic.w	r3, r3, #1
 8005c28:	663b      	str	r3, [r7, #96]	; 0x60
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3308      	adds	r3, #8
 8005c30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c32:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e5      	bne.n	8005c12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e067      	b.n	8005d2e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d04f      	beq.n	8005d0c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c7a:	d147      	bne.n	8005d0c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c84:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005caa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e6      	bne.n	8005c86 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f023 0301 	bic.w	r3, r3, #1
 8005cce:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005cd8:	623a      	str	r2, [r7, #32]
 8005cda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	69f9      	ldr	r1, [r7, #28]
 8005cde:	6a3a      	ldr	r2, [r7, #32]
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e5      	bne.n	8005cb8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e010      	b.n	8005d2e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	69da      	ldr	r2, [r3, #28]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	4013      	ands	r3, r2
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	bf0c      	ite	eq
 8005d1c:	2301      	moveq	r3, #1
 8005d1e:	2300      	movne	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	461a      	mov	r2, r3
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	f43f af4a 	beq.w	8005bc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3770      	adds	r7, #112	; 0x70
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b095      	sub	sp, #84	; 0x54
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e6      	bne.n	8005d3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3308      	adds	r3, #8
 8005d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	e853 3f00 	ldrex	r3, [r3]
 8005d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f023 0301 	bic.w	r3, r3, #1
 8005d86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d98:	e841 2300 	strex	r3, r2, [r1]
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e5      	bne.n	8005d70 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d118      	bne.n	8005dde <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f023 0310 	bic.w	r3, r3, #16
 8005dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dca:	61bb      	str	r3, [r7, #24]
 8005dcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	6979      	ldr	r1, [r7, #20]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e6      	bne.n	8005dac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2220      	movs	r2, #32
 8005de2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005df0:	bf00      	nop
 8005df2:	3754      	adds	r7, #84	; 0x54
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff fb3c 	bl	8005498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e44:	61fb      	str	r3, [r7, #28]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	61bb      	str	r3, [r7, #24]
 8005e50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6979      	ldr	r1, [r7, #20]
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e6      	bne.n	8005e30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff fb08 	bl	8005484 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e74:	bf00      	nop
 8005e76:	3720      	adds	r7, #32
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <__errno>:
 8005e90:	4b01      	ldr	r3, [pc, #4]	; (8005e98 <__errno+0x8>)
 8005e92:	6818      	ldr	r0, [r3, #0]
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	1000000c 	.word	0x1000000c

08005e9c <__libc_init_array>:
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	4d0d      	ldr	r5, [pc, #52]	; (8005ed4 <__libc_init_array+0x38>)
 8005ea0:	4c0d      	ldr	r4, [pc, #52]	; (8005ed8 <__libc_init_array+0x3c>)
 8005ea2:	1b64      	subs	r4, r4, r5
 8005ea4:	10a4      	asrs	r4, r4, #2
 8005ea6:	2600      	movs	r6, #0
 8005ea8:	42a6      	cmp	r6, r4
 8005eaa:	d109      	bne.n	8005ec0 <__libc_init_array+0x24>
 8005eac:	4d0b      	ldr	r5, [pc, #44]	; (8005edc <__libc_init_array+0x40>)
 8005eae:	4c0c      	ldr	r4, [pc, #48]	; (8005ee0 <__libc_init_array+0x44>)
 8005eb0:	f000 fc62 	bl	8006778 <_init>
 8005eb4:	1b64      	subs	r4, r4, r5
 8005eb6:	10a4      	asrs	r4, r4, #2
 8005eb8:	2600      	movs	r6, #0
 8005eba:	42a6      	cmp	r6, r4
 8005ebc:	d105      	bne.n	8005eca <__libc_init_array+0x2e>
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}
 8005ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ec4:	4798      	blx	r3
 8005ec6:	3601      	adds	r6, #1
 8005ec8:	e7ee      	b.n	8005ea8 <__libc_init_array+0xc>
 8005eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ece:	4798      	blx	r3
 8005ed0:	3601      	adds	r6, #1
 8005ed2:	e7f2      	b.n	8005eba <__libc_init_array+0x1e>
 8005ed4:	0800681c 	.word	0x0800681c
 8005ed8:	0800681c 	.word	0x0800681c
 8005edc:	0800681c 	.word	0x0800681c
 8005ee0:	08006820 	.word	0x08006820

08005ee4 <memset>:
 8005ee4:	4402      	add	r2, r0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d100      	bne.n	8005eee <memset+0xa>
 8005eec:	4770      	bx	lr
 8005eee:	f803 1b01 	strb.w	r1, [r3], #1
 8005ef2:	e7f9      	b.n	8005ee8 <memset+0x4>

08005ef4 <sniprintf>:
 8005ef4:	b40c      	push	{r2, r3}
 8005ef6:	b530      	push	{r4, r5, lr}
 8005ef8:	4b17      	ldr	r3, [pc, #92]	; (8005f58 <sniprintf+0x64>)
 8005efa:	1e0c      	subs	r4, r1, #0
 8005efc:	681d      	ldr	r5, [r3, #0]
 8005efe:	b09d      	sub	sp, #116	; 0x74
 8005f00:	da08      	bge.n	8005f14 <sniprintf+0x20>
 8005f02:	238b      	movs	r3, #139	; 0x8b
 8005f04:	602b      	str	r3, [r5, #0]
 8005f06:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0a:	b01d      	add	sp, #116	; 0x74
 8005f0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f10:	b002      	add	sp, #8
 8005f12:	4770      	bx	lr
 8005f14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005f18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005f1c:	bf14      	ite	ne
 8005f1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005f22:	4623      	moveq	r3, r4
 8005f24:	9304      	str	r3, [sp, #16]
 8005f26:	9307      	str	r3, [sp, #28]
 8005f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f2c:	9002      	str	r0, [sp, #8]
 8005f2e:	9006      	str	r0, [sp, #24]
 8005f30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f36:	ab21      	add	r3, sp, #132	; 0x84
 8005f38:	a902      	add	r1, sp, #8
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	9301      	str	r3, [sp, #4]
 8005f3e:	f000 f869 	bl	8006014 <_svfiprintf_r>
 8005f42:	1c43      	adds	r3, r0, #1
 8005f44:	bfbc      	itt	lt
 8005f46:	238b      	movlt	r3, #139	; 0x8b
 8005f48:	602b      	strlt	r3, [r5, #0]
 8005f4a:	2c00      	cmp	r4, #0
 8005f4c:	d0dd      	beq.n	8005f0a <sniprintf+0x16>
 8005f4e:	9b02      	ldr	r3, [sp, #8]
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	e7d9      	b.n	8005f0a <sniprintf+0x16>
 8005f56:	bf00      	nop
 8005f58:	1000000c 	.word	0x1000000c

08005f5c <__ssputs_r>:
 8005f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f60:	688e      	ldr	r6, [r1, #8]
 8005f62:	429e      	cmp	r6, r3
 8005f64:	4682      	mov	sl, r0
 8005f66:	460c      	mov	r4, r1
 8005f68:	4690      	mov	r8, r2
 8005f6a:	461f      	mov	r7, r3
 8005f6c:	d838      	bhi.n	8005fe0 <__ssputs_r+0x84>
 8005f6e:	898a      	ldrh	r2, [r1, #12]
 8005f70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f74:	d032      	beq.n	8005fdc <__ssputs_r+0x80>
 8005f76:	6825      	ldr	r5, [r4, #0]
 8005f78:	6909      	ldr	r1, [r1, #16]
 8005f7a:	eba5 0901 	sub.w	r9, r5, r1
 8005f7e:	6965      	ldr	r5, [r4, #20]
 8005f80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f88:	3301      	adds	r3, #1
 8005f8a:	444b      	add	r3, r9
 8005f8c:	106d      	asrs	r5, r5, #1
 8005f8e:	429d      	cmp	r5, r3
 8005f90:	bf38      	it	cc
 8005f92:	461d      	movcc	r5, r3
 8005f94:	0553      	lsls	r3, r2, #21
 8005f96:	d531      	bpl.n	8005ffc <__ssputs_r+0xa0>
 8005f98:	4629      	mov	r1, r5
 8005f9a:	f000 fb47 	bl	800662c <_malloc_r>
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	b950      	cbnz	r0, 8005fb8 <__ssputs_r+0x5c>
 8005fa2:	230c      	movs	r3, #12
 8005fa4:	f8ca 3000 	str.w	r3, [sl]
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fae:	81a3      	strh	r3, [r4, #12]
 8005fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb8:	6921      	ldr	r1, [r4, #16]
 8005fba:	464a      	mov	r2, r9
 8005fbc:	f000 fabe 	bl	800653c <memcpy>
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fca:	81a3      	strh	r3, [r4, #12]
 8005fcc:	6126      	str	r6, [r4, #16]
 8005fce:	6165      	str	r5, [r4, #20]
 8005fd0:	444e      	add	r6, r9
 8005fd2:	eba5 0509 	sub.w	r5, r5, r9
 8005fd6:	6026      	str	r6, [r4, #0]
 8005fd8:	60a5      	str	r5, [r4, #8]
 8005fda:	463e      	mov	r6, r7
 8005fdc:	42be      	cmp	r6, r7
 8005fde:	d900      	bls.n	8005fe2 <__ssputs_r+0x86>
 8005fe0:	463e      	mov	r6, r7
 8005fe2:	4632      	mov	r2, r6
 8005fe4:	6820      	ldr	r0, [r4, #0]
 8005fe6:	4641      	mov	r1, r8
 8005fe8:	f000 fab6 	bl	8006558 <memmove>
 8005fec:	68a3      	ldr	r3, [r4, #8]
 8005fee:	6822      	ldr	r2, [r4, #0]
 8005ff0:	1b9b      	subs	r3, r3, r6
 8005ff2:	4432      	add	r2, r6
 8005ff4:	60a3      	str	r3, [r4, #8]
 8005ff6:	6022      	str	r2, [r4, #0]
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	e7db      	b.n	8005fb4 <__ssputs_r+0x58>
 8005ffc:	462a      	mov	r2, r5
 8005ffe:	f000 fb6f 	bl	80066e0 <_realloc_r>
 8006002:	4606      	mov	r6, r0
 8006004:	2800      	cmp	r0, #0
 8006006:	d1e1      	bne.n	8005fcc <__ssputs_r+0x70>
 8006008:	6921      	ldr	r1, [r4, #16]
 800600a:	4650      	mov	r0, sl
 800600c:	f000 fabe 	bl	800658c <_free_r>
 8006010:	e7c7      	b.n	8005fa2 <__ssputs_r+0x46>
	...

08006014 <_svfiprintf_r>:
 8006014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006018:	4698      	mov	r8, r3
 800601a:	898b      	ldrh	r3, [r1, #12]
 800601c:	061b      	lsls	r3, r3, #24
 800601e:	b09d      	sub	sp, #116	; 0x74
 8006020:	4607      	mov	r7, r0
 8006022:	460d      	mov	r5, r1
 8006024:	4614      	mov	r4, r2
 8006026:	d50e      	bpl.n	8006046 <_svfiprintf_r+0x32>
 8006028:	690b      	ldr	r3, [r1, #16]
 800602a:	b963      	cbnz	r3, 8006046 <_svfiprintf_r+0x32>
 800602c:	2140      	movs	r1, #64	; 0x40
 800602e:	f000 fafd 	bl	800662c <_malloc_r>
 8006032:	6028      	str	r0, [r5, #0]
 8006034:	6128      	str	r0, [r5, #16]
 8006036:	b920      	cbnz	r0, 8006042 <_svfiprintf_r+0x2e>
 8006038:	230c      	movs	r3, #12
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	f04f 30ff 	mov.w	r0, #4294967295
 8006040:	e0d1      	b.n	80061e6 <_svfiprintf_r+0x1d2>
 8006042:	2340      	movs	r3, #64	; 0x40
 8006044:	616b      	str	r3, [r5, #20]
 8006046:	2300      	movs	r3, #0
 8006048:	9309      	str	r3, [sp, #36]	; 0x24
 800604a:	2320      	movs	r3, #32
 800604c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006050:	f8cd 800c 	str.w	r8, [sp, #12]
 8006054:	2330      	movs	r3, #48	; 0x30
 8006056:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006200 <_svfiprintf_r+0x1ec>
 800605a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800605e:	f04f 0901 	mov.w	r9, #1
 8006062:	4623      	mov	r3, r4
 8006064:	469a      	mov	sl, r3
 8006066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800606a:	b10a      	cbz	r2, 8006070 <_svfiprintf_r+0x5c>
 800606c:	2a25      	cmp	r2, #37	; 0x25
 800606e:	d1f9      	bne.n	8006064 <_svfiprintf_r+0x50>
 8006070:	ebba 0b04 	subs.w	fp, sl, r4
 8006074:	d00b      	beq.n	800608e <_svfiprintf_r+0x7a>
 8006076:	465b      	mov	r3, fp
 8006078:	4622      	mov	r2, r4
 800607a:	4629      	mov	r1, r5
 800607c:	4638      	mov	r0, r7
 800607e:	f7ff ff6d 	bl	8005f5c <__ssputs_r>
 8006082:	3001      	adds	r0, #1
 8006084:	f000 80aa 	beq.w	80061dc <_svfiprintf_r+0x1c8>
 8006088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800608a:	445a      	add	r2, fp
 800608c:	9209      	str	r2, [sp, #36]	; 0x24
 800608e:	f89a 3000 	ldrb.w	r3, [sl]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 80a2 	beq.w	80061dc <_svfiprintf_r+0x1c8>
 8006098:	2300      	movs	r3, #0
 800609a:	f04f 32ff 	mov.w	r2, #4294967295
 800609e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060a2:	f10a 0a01 	add.w	sl, sl, #1
 80060a6:	9304      	str	r3, [sp, #16]
 80060a8:	9307      	str	r3, [sp, #28]
 80060aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060ae:	931a      	str	r3, [sp, #104]	; 0x68
 80060b0:	4654      	mov	r4, sl
 80060b2:	2205      	movs	r2, #5
 80060b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b8:	4851      	ldr	r0, [pc, #324]	; (8006200 <_svfiprintf_r+0x1ec>)
 80060ba:	f7fa f891 	bl	80001e0 <memchr>
 80060be:	9a04      	ldr	r2, [sp, #16]
 80060c0:	b9d8      	cbnz	r0, 80060fa <_svfiprintf_r+0xe6>
 80060c2:	06d0      	lsls	r0, r2, #27
 80060c4:	bf44      	itt	mi
 80060c6:	2320      	movmi	r3, #32
 80060c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060cc:	0711      	lsls	r1, r2, #28
 80060ce:	bf44      	itt	mi
 80060d0:	232b      	movmi	r3, #43	; 0x2b
 80060d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060d6:	f89a 3000 	ldrb.w	r3, [sl]
 80060da:	2b2a      	cmp	r3, #42	; 0x2a
 80060dc:	d015      	beq.n	800610a <_svfiprintf_r+0xf6>
 80060de:	9a07      	ldr	r2, [sp, #28]
 80060e0:	4654      	mov	r4, sl
 80060e2:	2000      	movs	r0, #0
 80060e4:	f04f 0c0a 	mov.w	ip, #10
 80060e8:	4621      	mov	r1, r4
 80060ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060ee:	3b30      	subs	r3, #48	; 0x30
 80060f0:	2b09      	cmp	r3, #9
 80060f2:	d94e      	bls.n	8006192 <_svfiprintf_r+0x17e>
 80060f4:	b1b0      	cbz	r0, 8006124 <_svfiprintf_r+0x110>
 80060f6:	9207      	str	r2, [sp, #28]
 80060f8:	e014      	b.n	8006124 <_svfiprintf_r+0x110>
 80060fa:	eba0 0308 	sub.w	r3, r0, r8
 80060fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006102:	4313      	orrs	r3, r2
 8006104:	9304      	str	r3, [sp, #16]
 8006106:	46a2      	mov	sl, r4
 8006108:	e7d2      	b.n	80060b0 <_svfiprintf_r+0x9c>
 800610a:	9b03      	ldr	r3, [sp, #12]
 800610c:	1d19      	adds	r1, r3, #4
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	9103      	str	r1, [sp, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	bfbb      	ittet	lt
 8006116:	425b      	neglt	r3, r3
 8006118:	f042 0202 	orrlt.w	r2, r2, #2
 800611c:	9307      	strge	r3, [sp, #28]
 800611e:	9307      	strlt	r3, [sp, #28]
 8006120:	bfb8      	it	lt
 8006122:	9204      	strlt	r2, [sp, #16]
 8006124:	7823      	ldrb	r3, [r4, #0]
 8006126:	2b2e      	cmp	r3, #46	; 0x2e
 8006128:	d10c      	bne.n	8006144 <_svfiprintf_r+0x130>
 800612a:	7863      	ldrb	r3, [r4, #1]
 800612c:	2b2a      	cmp	r3, #42	; 0x2a
 800612e:	d135      	bne.n	800619c <_svfiprintf_r+0x188>
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	1d1a      	adds	r2, r3, #4
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	9203      	str	r2, [sp, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	bfb8      	it	lt
 800613c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006140:	3402      	adds	r4, #2
 8006142:	9305      	str	r3, [sp, #20]
 8006144:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006210 <_svfiprintf_r+0x1fc>
 8006148:	7821      	ldrb	r1, [r4, #0]
 800614a:	2203      	movs	r2, #3
 800614c:	4650      	mov	r0, sl
 800614e:	f7fa f847 	bl	80001e0 <memchr>
 8006152:	b140      	cbz	r0, 8006166 <_svfiprintf_r+0x152>
 8006154:	2340      	movs	r3, #64	; 0x40
 8006156:	eba0 000a 	sub.w	r0, r0, sl
 800615a:	fa03 f000 	lsl.w	r0, r3, r0
 800615e:	9b04      	ldr	r3, [sp, #16]
 8006160:	4303      	orrs	r3, r0
 8006162:	3401      	adds	r4, #1
 8006164:	9304      	str	r3, [sp, #16]
 8006166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800616a:	4826      	ldr	r0, [pc, #152]	; (8006204 <_svfiprintf_r+0x1f0>)
 800616c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006170:	2206      	movs	r2, #6
 8006172:	f7fa f835 	bl	80001e0 <memchr>
 8006176:	2800      	cmp	r0, #0
 8006178:	d038      	beq.n	80061ec <_svfiprintf_r+0x1d8>
 800617a:	4b23      	ldr	r3, [pc, #140]	; (8006208 <_svfiprintf_r+0x1f4>)
 800617c:	bb1b      	cbnz	r3, 80061c6 <_svfiprintf_r+0x1b2>
 800617e:	9b03      	ldr	r3, [sp, #12]
 8006180:	3307      	adds	r3, #7
 8006182:	f023 0307 	bic.w	r3, r3, #7
 8006186:	3308      	adds	r3, #8
 8006188:	9303      	str	r3, [sp, #12]
 800618a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800618c:	4433      	add	r3, r6
 800618e:	9309      	str	r3, [sp, #36]	; 0x24
 8006190:	e767      	b.n	8006062 <_svfiprintf_r+0x4e>
 8006192:	fb0c 3202 	mla	r2, ip, r2, r3
 8006196:	460c      	mov	r4, r1
 8006198:	2001      	movs	r0, #1
 800619a:	e7a5      	b.n	80060e8 <_svfiprintf_r+0xd4>
 800619c:	2300      	movs	r3, #0
 800619e:	3401      	adds	r4, #1
 80061a0:	9305      	str	r3, [sp, #20]
 80061a2:	4619      	mov	r1, r3
 80061a4:	f04f 0c0a 	mov.w	ip, #10
 80061a8:	4620      	mov	r0, r4
 80061aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061ae:	3a30      	subs	r2, #48	; 0x30
 80061b0:	2a09      	cmp	r2, #9
 80061b2:	d903      	bls.n	80061bc <_svfiprintf_r+0x1a8>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0c5      	beq.n	8006144 <_svfiprintf_r+0x130>
 80061b8:	9105      	str	r1, [sp, #20]
 80061ba:	e7c3      	b.n	8006144 <_svfiprintf_r+0x130>
 80061bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80061c0:	4604      	mov	r4, r0
 80061c2:	2301      	movs	r3, #1
 80061c4:	e7f0      	b.n	80061a8 <_svfiprintf_r+0x194>
 80061c6:	ab03      	add	r3, sp, #12
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	462a      	mov	r2, r5
 80061cc:	4b0f      	ldr	r3, [pc, #60]	; (800620c <_svfiprintf_r+0x1f8>)
 80061ce:	a904      	add	r1, sp, #16
 80061d0:	4638      	mov	r0, r7
 80061d2:	f3af 8000 	nop.w
 80061d6:	1c42      	adds	r2, r0, #1
 80061d8:	4606      	mov	r6, r0
 80061da:	d1d6      	bne.n	800618a <_svfiprintf_r+0x176>
 80061dc:	89ab      	ldrh	r3, [r5, #12]
 80061de:	065b      	lsls	r3, r3, #25
 80061e0:	f53f af2c 	bmi.w	800603c <_svfiprintf_r+0x28>
 80061e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061e6:	b01d      	add	sp, #116	; 0x74
 80061e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ec:	ab03      	add	r3, sp, #12
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	462a      	mov	r2, r5
 80061f2:	4b06      	ldr	r3, [pc, #24]	; (800620c <_svfiprintf_r+0x1f8>)
 80061f4:	a904      	add	r1, sp, #16
 80061f6:	4638      	mov	r0, r7
 80061f8:	f000 f87a 	bl	80062f0 <_printf_i>
 80061fc:	e7eb      	b.n	80061d6 <_svfiprintf_r+0x1c2>
 80061fe:	bf00      	nop
 8006200:	080067e0 	.word	0x080067e0
 8006204:	080067ea 	.word	0x080067ea
 8006208:	00000000 	.word	0x00000000
 800620c:	08005f5d 	.word	0x08005f5d
 8006210:	080067e6 	.word	0x080067e6

08006214 <_printf_common>:
 8006214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006218:	4616      	mov	r6, r2
 800621a:	4699      	mov	r9, r3
 800621c:	688a      	ldr	r2, [r1, #8]
 800621e:	690b      	ldr	r3, [r1, #16]
 8006220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006224:	4293      	cmp	r3, r2
 8006226:	bfb8      	it	lt
 8006228:	4613      	movlt	r3, r2
 800622a:	6033      	str	r3, [r6, #0]
 800622c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006230:	4607      	mov	r7, r0
 8006232:	460c      	mov	r4, r1
 8006234:	b10a      	cbz	r2, 800623a <_printf_common+0x26>
 8006236:	3301      	adds	r3, #1
 8006238:	6033      	str	r3, [r6, #0]
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	0699      	lsls	r1, r3, #26
 800623e:	bf42      	ittt	mi
 8006240:	6833      	ldrmi	r3, [r6, #0]
 8006242:	3302      	addmi	r3, #2
 8006244:	6033      	strmi	r3, [r6, #0]
 8006246:	6825      	ldr	r5, [r4, #0]
 8006248:	f015 0506 	ands.w	r5, r5, #6
 800624c:	d106      	bne.n	800625c <_printf_common+0x48>
 800624e:	f104 0a19 	add.w	sl, r4, #25
 8006252:	68e3      	ldr	r3, [r4, #12]
 8006254:	6832      	ldr	r2, [r6, #0]
 8006256:	1a9b      	subs	r3, r3, r2
 8006258:	42ab      	cmp	r3, r5
 800625a:	dc26      	bgt.n	80062aa <_printf_common+0x96>
 800625c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006260:	1e13      	subs	r3, r2, #0
 8006262:	6822      	ldr	r2, [r4, #0]
 8006264:	bf18      	it	ne
 8006266:	2301      	movne	r3, #1
 8006268:	0692      	lsls	r2, r2, #26
 800626a:	d42b      	bmi.n	80062c4 <_printf_common+0xb0>
 800626c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006270:	4649      	mov	r1, r9
 8006272:	4638      	mov	r0, r7
 8006274:	47c0      	blx	r8
 8006276:	3001      	adds	r0, #1
 8006278:	d01e      	beq.n	80062b8 <_printf_common+0xa4>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	68e5      	ldr	r5, [r4, #12]
 800627e:	6832      	ldr	r2, [r6, #0]
 8006280:	f003 0306 	and.w	r3, r3, #6
 8006284:	2b04      	cmp	r3, #4
 8006286:	bf08      	it	eq
 8006288:	1aad      	subeq	r5, r5, r2
 800628a:	68a3      	ldr	r3, [r4, #8]
 800628c:	6922      	ldr	r2, [r4, #16]
 800628e:	bf0c      	ite	eq
 8006290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006294:	2500      	movne	r5, #0
 8006296:	4293      	cmp	r3, r2
 8006298:	bfc4      	itt	gt
 800629a:	1a9b      	subgt	r3, r3, r2
 800629c:	18ed      	addgt	r5, r5, r3
 800629e:	2600      	movs	r6, #0
 80062a0:	341a      	adds	r4, #26
 80062a2:	42b5      	cmp	r5, r6
 80062a4:	d11a      	bne.n	80062dc <_printf_common+0xc8>
 80062a6:	2000      	movs	r0, #0
 80062a8:	e008      	b.n	80062bc <_printf_common+0xa8>
 80062aa:	2301      	movs	r3, #1
 80062ac:	4652      	mov	r2, sl
 80062ae:	4649      	mov	r1, r9
 80062b0:	4638      	mov	r0, r7
 80062b2:	47c0      	blx	r8
 80062b4:	3001      	adds	r0, #1
 80062b6:	d103      	bne.n	80062c0 <_printf_common+0xac>
 80062b8:	f04f 30ff 	mov.w	r0, #4294967295
 80062bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c0:	3501      	adds	r5, #1
 80062c2:	e7c6      	b.n	8006252 <_printf_common+0x3e>
 80062c4:	18e1      	adds	r1, r4, r3
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	2030      	movs	r0, #48	; 0x30
 80062ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062ce:	4422      	add	r2, r4
 80062d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062d8:	3302      	adds	r3, #2
 80062da:	e7c7      	b.n	800626c <_printf_common+0x58>
 80062dc:	2301      	movs	r3, #1
 80062de:	4622      	mov	r2, r4
 80062e0:	4649      	mov	r1, r9
 80062e2:	4638      	mov	r0, r7
 80062e4:	47c0      	blx	r8
 80062e6:	3001      	adds	r0, #1
 80062e8:	d0e6      	beq.n	80062b8 <_printf_common+0xa4>
 80062ea:	3601      	adds	r6, #1
 80062ec:	e7d9      	b.n	80062a2 <_printf_common+0x8e>
	...

080062f0 <_printf_i>:
 80062f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062f4:	460c      	mov	r4, r1
 80062f6:	4691      	mov	r9, r2
 80062f8:	7e27      	ldrb	r7, [r4, #24]
 80062fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80062fc:	2f78      	cmp	r7, #120	; 0x78
 80062fe:	4680      	mov	r8, r0
 8006300:	469a      	mov	sl, r3
 8006302:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006306:	d807      	bhi.n	8006318 <_printf_i+0x28>
 8006308:	2f62      	cmp	r7, #98	; 0x62
 800630a:	d80a      	bhi.n	8006322 <_printf_i+0x32>
 800630c:	2f00      	cmp	r7, #0
 800630e:	f000 80d8 	beq.w	80064c2 <_printf_i+0x1d2>
 8006312:	2f58      	cmp	r7, #88	; 0x58
 8006314:	f000 80a3 	beq.w	800645e <_printf_i+0x16e>
 8006318:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800631c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006320:	e03a      	b.n	8006398 <_printf_i+0xa8>
 8006322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006326:	2b15      	cmp	r3, #21
 8006328:	d8f6      	bhi.n	8006318 <_printf_i+0x28>
 800632a:	a001      	add	r0, pc, #4	; (adr r0, 8006330 <_printf_i+0x40>)
 800632c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006330:	08006389 	.word	0x08006389
 8006334:	0800639d 	.word	0x0800639d
 8006338:	08006319 	.word	0x08006319
 800633c:	08006319 	.word	0x08006319
 8006340:	08006319 	.word	0x08006319
 8006344:	08006319 	.word	0x08006319
 8006348:	0800639d 	.word	0x0800639d
 800634c:	08006319 	.word	0x08006319
 8006350:	08006319 	.word	0x08006319
 8006354:	08006319 	.word	0x08006319
 8006358:	08006319 	.word	0x08006319
 800635c:	080064a9 	.word	0x080064a9
 8006360:	080063cd 	.word	0x080063cd
 8006364:	0800648b 	.word	0x0800648b
 8006368:	08006319 	.word	0x08006319
 800636c:	08006319 	.word	0x08006319
 8006370:	080064cb 	.word	0x080064cb
 8006374:	08006319 	.word	0x08006319
 8006378:	080063cd 	.word	0x080063cd
 800637c:	08006319 	.word	0x08006319
 8006380:	08006319 	.word	0x08006319
 8006384:	08006493 	.word	0x08006493
 8006388:	680b      	ldr	r3, [r1, #0]
 800638a:	1d1a      	adds	r2, r3, #4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	600a      	str	r2, [r1, #0]
 8006390:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006398:	2301      	movs	r3, #1
 800639a:	e0a3      	b.n	80064e4 <_printf_i+0x1f4>
 800639c:	6825      	ldr	r5, [r4, #0]
 800639e:	6808      	ldr	r0, [r1, #0]
 80063a0:	062e      	lsls	r6, r5, #24
 80063a2:	f100 0304 	add.w	r3, r0, #4
 80063a6:	d50a      	bpl.n	80063be <_printf_i+0xce>
 80063a8:	6805      	ldr	r5, [r0, #0]
 80063aa:	600b      	str	r3, [r1, #0]
 80063ac:	2d00      	cmp	r5, #0
 80063ae:	da03      	bge.n	80063b8 <_printf_i+0xc8>
 80063b0:	232d      	movs	r3, #45	; 0x2d
 80063b2:	426d      	negs	r5, r5
 80063b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063b8:	485e      	ldr	r0, [pc, #376]	; (8006534 <_printf_i+0x244>)
 80063ba:	230a      	movs	r3, #10
 80063bc:	e019      	b.n	80063f2 <_printf_i+0x102>
 80063be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80063c2:	6805      	ldr	r5, [r0, #0]
 80063c4:	600b      	str	r3, [r1, #0]
 80063c6:	bf18      	it	ne
 80063c8:	b22d      	sxthne	r5, r5
 80063ca:	e7ef      	b.n	80063ac <_printf_i+0xbc>
 80063cc:	680b      	ldr	r3, [r1, #0]
 80063ce:	6825      	ldr	r5, [r4, #0]
 80063d0:	1d18      	adds	r0, r3, #4
 80063d2:	6008      	str	r0, [r1, #0]
 80063d4:	0628      	lsls	r0, r5, #24
 80063d6:	d501      	bpl.n	80063dc <_printf_i+0xec>
 80063d8:	681d      	ldr	r5, [r3, #0]
 80063da:	e002      	b.n	80063e2 <_printf_i+0xf2>
 80063dc:	0669      	lsls	r1, r5, #25
 80063de:	d5fb      	bpl.n	80063d8 <_printf_i+0xe8>
 80063e0:	881d      	ldrh	r5, [r3, #0]
 80063e2:	4854      	ldr	r0, [pc, #336]	; (8006534 <_printf_i+0x244>)
 80063e4:	2f6f      	cmp	r7, #111	; 0x6f
 80063e6:	bf0c      	ite	eq
 80063e8:	2308      	moveq	r3, #8
 80063ea:	230a      	movne	r3, #10
 80063ec:	2100      	movs	r1, #0
 80063ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063f2:	6866      	ldr	r6, [r4, #4]
 80063f4:	60a6      	str	r6, [r4, #8]
 80063f6:	2e00      	cmp	r6, #0
 80063f8:	bfa2      	ittt	ge
 80063fa:	6821      	ldrge	r1, [r4, #0]
 80063fc:	f021 0104 	bicge.w	r1, r1, #4
 8006400:	6021      	strge	r1, [r4, #0]
 8006402:	b90d      	cbnz	r5, 8006408 <_printf_i+0x118>
 8006404:	2e00      	cmp	r6, #0
 8006406:	d04d      	beq.n	80064a4 <_printf_i+0x1b4>
 8006408:	4616      	mov	r6, r2
 800640a:	fbb5 f1f3 	udiv	r1, r5, r3
 800640e:	fb03 5711 	mls	r7, r3, r1, r5
 8006412:	5dc7      	ldrb	r7, [r0, r7]
 8006414:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006418:	462f      	mov	r7, r5
 800641a:	42bb      	cmp	r3, r7
 800641c:	460d      	mov	r5, r1
 800641e:	d9f4      	bls.n	800640a <_printf_i+0x11a>
 8006420:	2b08      	cmp	r3, #8
 8006422:	d10b      	bne.n	800643c <_printf_i+0x14c>
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	07df      	lsls	r7, r3, #31
 8006428:	d508      	bpl.n	800643c <_printf_i+0x14c>
 800642a:	6923      	ldr	r3, [r4, #16]
 800642c:	6861      	ldr	r1, [r4, #4]
 800642e:	4299      	cmp	r1, r3
 8006430:	bfde      	ittt	le
 8006432:	2330      	movle	r3, #48	; 0x30
 8006434:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006438:	f106 36ff 	addle.w	r6, r6, #4294967295
 800643c:	1b92      	subs	r2, r2, r6
 800643e:	6122      	str	r2, [r4, #16]
 8006440:	f8cd a000 	str.w	sl, [sp]
 8006444:	464b      	mov	r3, r9
 8006446:	aa03      	add	r2, sp, #12
 8006448:	4621      	mov	r1, r4
 800644a:	4640      	mov	r0, r8
 800644c:	f7ff fee2 	bl	8006214 <_printf_common>
 8006450:	3001      	adds	r0, #1
 8006452:	d14c      	bne.n	80064ee <_printf_i+0x1fe>
 8006454:	f04f 30ff 	mov.w	r0, #4294967295
 8006458:	b004      	add	sp, #16
 800645a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800645e:	4835      	ldr	r0, [pc, #212]	; (8006534 <_printf_i+0x244>)
 8006460:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	680e      	ldr	r6, [r1, #0]
 8006468:	061f      	lsls	r7, r3, #24
 800646a:	f856 5b04 	ldr.w	r5, [r6], #4
 800646e:	600e      	str	r6, [r1, #0]
 8006470:	d514      	bpl.n	800649c <_printf_i+0x1ac>
 8006472:	07d9      	lsls	r1, r3, #31
 8006474:	bf44      	itt	mi
 8006476:	f043 0320 	orrmi.w	r3, r3, #32
 800647a:	6023      	strmi	r3, [r4, #0]
 800647c:	b91d      	cbnz	r5, 8006486 <_printf_i+0x196>
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	f023 0320 	bic.w	r3, r3, #32
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	2310      	movs	r3, #16
 8006488:	e7b0      	b.n	80063ec <_printf_i+0xfc>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	f043 0320 	orr.w	r3, r3, #32
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	2378      	movs	r3, #120	; 0x78
 8006494:	4828      	ldr	r0, [pc, #160]	; (8006538 <_printf_i+0x248>)
 8006496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800649a:	e7e3      	b.n	8006464 <_printf_i+0x174>
 800649c:	065e      	lsls	r6, r3, #25
 800649e:	bf48      	it	mi
 80064a0:	b2ad      	uxthmi	r5, r5
 80064a2:	e7e6      	b.n	8006472 <_printf_i+0x182>
 80064a4:	4616      	mov	r6, r2
 80064a6:	e7bb      	b.n	8006420 <_printf_i+0x130>
 80064a8:	680b      	ldr	r3, [r1, #0]
 80064aa:	6826      	ldr	r6, [r4, #0]
 80064ac:	6960      	ldr	r0, [r4, #20]
 80064ae:	1d1d      	adds	r5, r3, #4
 80064b0:	600d      	str	r5, [r1, #0]
 80064b2:	0635      	lsls	r5, r6, #24
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	d501      	bpl.n	80064bc <_printf_i+0x1cc>
 80064b8:	6018      	str	r0, [r3, #0]
 80064ba:	e002      	b.n	80064c2 <_printf_i+0x1d2>
 80064bc:	0671      	lsls	r1, r6, #25
 80064be:	d5fb      	bpl.n	80064b8 <_printf_i+0x1c8>
 80064c0:	8018      	strh	r0, [r3, #0]
 80064c2:	2300      	movs	r3, #0
 80064c4:	6123      	str	r3, [r4, #16]
 80064c6:	4616      	mov	r6, r2
 80064c8:	e7ba      	b.n	8006440 <_printf_i+0x150>
 80064ca:	680b      	ldr	r3, [r1, #0]
 80064cc:	1d1a      	adds	r2, r3, #4
 80064ce:	600a      	str	r2, [r1, #0]
 80064d0:	681e      	ldr	r6, [r3, #0]
 80064d2:	6862      	ldr	r2, [r4, #4]
 80064d4:	2100      	movs	r1, #0
 80064d6:	4630      	mov	r0, r6
 80064d8:	f7f9 fe82 	bl	80001e0 <memchr>
 80064dc:	b108      	cbz	r0, 80064e2 <_printf_i+0x1f2>
 80064de:	1b80      	subs	r0, r0, r6
 80064e0:	6060      	str	r0, [r4, #4]
 80064e2:	6863      	ldr	r3, [r4, #4]
 80064e4:	6123      	str	r3, [r4, #16]
 80064e6:	2300      	movs	r3, #0
 80064e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ec:	e7a8      	b.n	8006440 <_printf_i+0x150>
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	4632      	mov	r2, r6
 80064f2:	4649      	mov	r1, r9
 80064f4:	4640      	mov	r0, r8
 80064f6:	47d0      	blx	sl
 80064f8:	3001      	adds	r0, #1
 80064fa:	d0ab      	beq.n	8006454 <_printf_i+0x164>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	079b      	lsls	r3, r3, #30
 8006500:	d413      	bmi.n	800652a <_printf_i+0x23a>
 8006502:	68e0      	ldr	r0, [r4, #12]
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	4298      	cmp	r0, r3
 8006508:	bfb8      	it	lt
 800650a:	4618      	movlt	r0, r3
 800650c:	e7a4      	b.n	8006458 <_printf_i+0x168>
 800650e:	2301      	movs	r3, #1
 8006510:	4632      	mov	r2, r6
 8006512:	4649      	mov	r1, r9
 8006514:	4640      	mov	r0, r8
 8006516:	47d0      	blx	sl
 8006518:	3001      	adds	r0, #1
 800651a:	d09b      	beq.n	8006454 <_printf_i+0x164>
 800651c:	3501      	adds	r5, #1
 800651e:	68e3      	ldr	r3, [r4, #12]
 8006520:	9903      	ldr	r1, [sp, #12]
 8006522:	1a5b      	subs	r3, r3, r1
 8006524:	42ab      	cmp	r3, r5
 8006526:	dcf2      	bgt.n	800650e <_printf_i+0x21e>
 8006528:	e7eb      	b.n	8006502 <_printf_i+0x212>
 800652a:	2500      	movs	r5, #0
 800652c:	f104 0619 	add.w	r6, r4, #25
 8006530:	e7f5      	b.n	800651e <_printf_i+0x22e>
 8006532:	bf00      	nop
 8006534:	080067f1 	.word	0x080067f1
 8006538:	08006802 	.word	0x08006802

0800653c <memcpy>:
 800653c:	440a      	add	r2, r1
 800653e:	4291      	cmp	r1, r2
 8006540:	f100 33ff 	add.w	r3, r0, #4294967295
 8006544:	d100      	bne.n	8006548 <memcpy+0xc>
 8006546:	4770      	bx	lr
 8006548:	b510      	push	{r4, lr}
 800654a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800654e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006552:	4291      	cmp	r1, r2
 8006554:	d1f9      	bne.n	800654a <memcpy+0xe>
 8006556:	bd10      	pop	{r4, pc}

08006558 <memmove>:
 8006558:	4288      	cmp	r0, r1
 800655a:	b510      	push	{r4, lr}
 800655c:	eb01 0402 	add.w	r4, r1, r2
 8006560:	d902      	bls.n	8006568 <memmove+0x10>
 8006562:	4284      	cmp	r4, r0
 8006564:	4623      	mov	r3, r4
 8006566:	d807      	bhi.n	8006578 <memmove+0x20>
 8006568:	1e43      	subs	r3, r0, #1
 800656a:	42a1      	cmp	r1, r4
 800656c:	d008      	beq.n	8006580 <memmove+0x28>
 800656e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006572:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006576:	e7f8      	b.n	800656a <memmove+0x12>
 8006578:	4402      	add	r2, r0
 800657a:	4601      	mov	r1, r0
 800657c:	428a      	cmp	r2, r1
 800657e:	d100      	bne.n	8006582 <memmove+0x2a>
 8006580:	bd10      	pop	{r4, pc}
 8006582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800658a:	e7f7      	b.n	800657c <memmove+0x24>

0800658c <_free_r>:
 800658c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800658e:	2900      	cmp	r1, #0
 8006590:	d048      	beq.n	8006624 <_free_r+0x98>
 8006592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006596:	9001      	str	r0, [sp, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	f1a1 0404 	sub.w	r4, r1, #4
 800659e:	bfb8      	it	lt
 80065a0:	18e4      	addlt	r4, r4, r3
 80065a2:	f000 f8d3 	bl	800674c <__malloc_lock>
 80065a6:	4a20      	ldr	r2, [pc, #128]	; (8006628 <_free_r+0x9c>)
 80065a8:	9801      	ldr	r0, [sp, #4]
 80065aa:	6813      	ldr	r3, [r2, #0]
 80065ac:	4615      	mov	r5, r2
 80065ae:	b933      	cbnz	r3, 80065be <_free_r+0x32>
 80065b0:	6063      	str	r3, [r4, #4]
 80065b2:	6014      	str	r4, [r2, #0]
 80065b4:	b003      	add	sp, #12
 80065b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065ba:	f000 b8cd 	b.w	8006758 <__malloc_unlock>
 80065be:	42a3      	cmp	r3, r4
 80065c0:	d90b      	bls.n	80065da <_free_r+0x4e>
 80065c2:	6821      	ldr	r1, [r4, #0]
 80065c4:	1862      	adds	r2, r4, r1
 80065c6:	4293      	cmp	r3, r2
 80065c8:	bf04      	itt	eq
 80065ca:	681a      	ldreq	r2, [r3, #0]
 80065cc:	685b      	ldreq	r3, [r3, #4]
 80065ce:	6063      	str	r3, [r4, #4]
 80065d0:	bf04      	itt	eq
 80065d2:	1852      	addeq	r2, r2, r1
 80065d4:	6022      	streq	r2, [r4, #0]
 80065d6:	602c      	str	r4, [r5, #0]
 80065d8:	e7ec      	b.n	80065b4 <_free_r+0x28>
 80065da:	461a      	mov	r2, r3
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	b10b      	cbz	r3, 80065e4 <_free_r+0x58>
 80065e0:	42a3      	cmp	r3, r4
 80065e2:	d9fa      	bls.n	80065da <_free_r+0x4e>
 80065e4:	6811      	ldr	r1, [r2, #0]
 80065e6:	1855      	adds	r5, r2, r1
 80065e8:	42a5      	cmp	r5, r4
 80065ea:	d10b      	bne.n	8006604 <_free_r+0x78>
 80065ec:	6824      	ldr	r4, [r4, #0]
 80065ee:	4421      	add	r1, r4
 80065f0:	1854      	adds	r4, r2, r1
 80065f2:	42a3      	cmp	r3, r4
 80065f4:	6011      	str	r1, [r2, #0]
 80065f6:	d1dd      	bne.n	80065b4 <_free_r+0x28>
 80065f8:	681c      	ldr	r4, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	6053      	str	r3, [r2, #4]
 80065fe:	4421      	add	r1, r4
 8006600:	6011      	str	r1, [r2, #0]
 8006602:	e7d7      	b.n	80065b4 <_free_r+0x28>
 8006604:	d902      	bls.n	800660c <_free_r+0x80>
 8006606:	230c      	movs	r3, #12
 8006608:	6003      	str	r3, [r0, #0]
 800660a:	e7d3      	b.n	80065b4 <_free_r+0x28>
 800660c:	6825      	ldr	r5, [r4, #0]
 800660e:	1961      	adds	r1, r4, r5
 8006610:	428b      	cmp	r3, r1
 8006612:	bf04      	itt	eq
 8006614:	6819      	ldreq	r1, [r3, #0]
 8006616:	685b      	ldreq	r3, [r3, #4]
 8006618:	6063      	str	r3, [r4, #4]
 800661a:	bf04      	itt	eq
 800661c:	1949      	addeq	r1, r1, r5
 800661e:	6021      	streq	r1, [r4, #0]
 8006620:	6054      	str	r4, [r2, #4]
 8006622:	e7c7      	b.n	80065b4 <_free_r+0x28>
 8006624:	b003      	add	sp, #12
 8006626:	bd30      	pop	{r4, r5, pc}
 8006628:	20000024 	.word	0x20000024

0800662c <_malloc_r>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	1ccd      	adds	r5, r1, #3
 8006630:	f025 0503 	bic.w	r5, r5, #3
 8006634:	3508      	adds	r5, #8
 8006636:	2d0c      	cmp	r5, #12
 8006638:	bf38      	it	cc
 800663a:	250c      	movcc	r5, #12
 800663c:	2d00      	cmp	r5, #0
 800663e:	4606      	mov	r6, r0
 8006640:	db01      	blt.n	8006646 <_malloc_r+0x1a>
 8006642:	42a9      	cmp	r1, r5
 8006644:	d903      	bls.n	800664e <_malloc_r+0x22>
 8006646:	230c      	movs	r3, #12
 8006648:	6033      	str	r3, [r6, #0]
 800664a:	2000      	movs	r0, #0
 800664c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800664e:	f000 f87d 	bl	800674c <__malloc_lock>
 8006652:	4921      	ldr	r1, [pc, #132]	; (80066d8 <_malloc_r+0xac>)
 8006654:	680a      	ldr	r2, [r1, #0]
 8006656:	4614      	mov	r4, r2
 8006658:	b99c      	cbnz	r4, 8006682 <_malloc_r+0x56>
 800665a:	4f20      	ldr	r7, [pc, #128]	; (80066dc <_malloc_r+0xb0>)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	b923      	cbnz	r3, 800666a <_malloc_r+0x3e>
 8006660:	4621      	mov	r1, r4
 8006662:	4630      	mov	r0, r6
 8006664:	f000 f862 	bl	800672c <_sbrk_r>
 8006668:	6038      	str	r0, [r7, #0]
 800666a:	4629      	mov	r1, r5
 800666c:	4630      	mov	r0, r6
 800666e:	f000 f85d 	bl	800672c <_sbrk_r>
 8006672:	1c43      	adds	r3, r0, #1
 8006674:	d123      	bne.n	80066be <_malloc_r+0x92>
 8006676:	230c      	movs	r3, #12
 8006678:	6033      	str	r3, [r6, #0]
 800667a:	4630      	mov	r0, r6
 800667c:	f000 f86c 	bl	8006758 <__malloc_unlock>
 8006680:	e7e3      	b.n	800664a <_malloc_r+0x1e>
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	1b5b      	subs	r3, r3, r5
 8006686:	d417      	bmi.n	80066b8 <_malloc_r+0x8c>
 8006688:	2b0b      	cmp	r3, #11
 800668a:	d903      	bls.n	8006694 <_malloc_r+0x68>
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	441c      	add	r4, r3
 8006690:	6025      	str	r5, [r4, #0]
 8006692:	e004      	b.n	800669e <_malloc_r+0x72>
 8006694:	6863      	ldr	r3, [r4, #4]
 8006696:	42a2      	cmp	r2, r4
 8006698:	bf0c      	ite	eq
 800669a:	600b      	streq	r3, [r1, #0]
 800669c:	6053      	strne	r3, [r2, #4]
 800669e:	4630      	mov	r0, r6
 80066a0:	f000 f85a 	bl	8006758 <__malloc_unlock>
 80066a4:	f104 000b 	add.w	r0, r4, #11
 80066a8:	1d23      	adds	r3, r4, #4
 80066aa:	f020 0007 	bic.w	r0, r0, #7
 80066ae:	1ac2      	subs	r2, r0, r3
 80066b0:	d0cc      	beq.n	800664c <_malloc_r+0x20>
 80066b2:	1a1b      	subs	r3, r3, r0
 80066b4:	50a3      	str	r3, [r4, r2]
 80066b6:	e7c9      	b.n	800664c <_malloc_r+0x20>
 80066b8:	4622      	mov	r2, r4
 80066ba:	6864      	ldr	r4, [r4, #4]
 80066bc:	e7cc      	b.n	8006658 <_malloc_r+0x2c>
 80066be:	1cc4      	adds	r4, r0, #3
 80066c0:	f024 0403 	bic.w	r4, r4, #3
 80066c4:	42a0      	cmp	r0, r4
 80066c6:	d0e3      	beq.n	8006690 <_malloc_r+0x64>
 80066c8:	1a21      	subs	r1, r4, r0
 80066ca:	4630      	mov	r0, r6
 80066cc:	f000 f82e 	bl	800672c <_sbrk_r>
 80066d0:	3001      	adds	r0, #1
 80066d2:	d1dd      	bne.n	8006690 <_malloc_r+0x64>
 80066d4:	e7cf      	b.n	8006676 <_malloc_r+0x4a>
 80066d6:	bf00      	nop
 80066d8:	20000024 	.word	0x20000024
 80066dc:	20000028 	.word	0x20000028

080066e0 <_realloc_r>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	4607      	mov	r7, r0
 80066e4:	4614      	mov	r4, r2
 80066e6:	460e      	mov	r6, r1
 80066e8:	b921      	cbnz	r1, 80066f4 <_realloc_r+0x14>
 80066ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80066ee:	4611      	mov	r1, r2
 80066f0:	f7ff bf9c 	b.w	800662c <_malloc_r>
 80066f4:	b922      	cbnz	r2, 8006700 <_realloc_r+0x20>
 80066f6:	f7ff ff49 	bl	800658c <_free_r>
 80066fa:	4625      	mov	r5, r4
 80066fc:	4628      	mov	r0, r5
 80066fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006700:	f000 f830 	bl	8006764 <_malloc_usable_size_r>
 8006704:	42a0      	cmp	r0, r4
 8006706:	d20f      	bcs.n	8006728 <_realloc_r+0x48>
 8006708:	4621      	mov	r1, r4
 800670a:	4638      	mov	r0, r7
 800670c:	f7ff ff8e 	bl	800662c <_malloc_r>
 8006710:	4605      	mov	r5, r0
 8006712:	2800      	cmp	r0, #0
 8006714:	d0f2      	beq.n	80066fc <_realloc_r+0x1c>
 8006716:	4631      	mov	r1, r6
 8006718:	4622      	mov	r2, r4
 800671a:	f7ff ff0f 	bl	800653c <memcpy>
 800671e:	4631      	mov	r1, r6
 8006720:	4638      	mov	r0, r7
 8006722:	f7ff ff33 	bl	800658c <_free_r>
 8006726:	e7e9      	b.n	80066fc <_realloc_r+0x1c>
 8006728:	4635      	mov	r5, r6
 800672a:	e7e7      	b.n	80066fc <_realloc_r+0x1c>

0800672c <_sbrk_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4d06      	ldr	r5, [pc, #24]	; (8006748 <_sbrk_r+0x1c>)
 8006730:	2300      	movs	r3, #0
 8006732:	4604      	mov	r4, r0
 8006734:	4608      	mov	r0, r1
 8006736:	602b      	str	r3, [r5, #0]
 8006738:	f7fa fb5c 	bl	8000df4 <_sbrk>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d102      	bne.n	8006746 <_sbrk_r+0x1a>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	b103      	cbz	r3, 8006746 <_sbrk_r+0x1a>
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	20002234 	.word	0x20002234

0800674c <__malloc_lock>:
 800674c:	4801      	ldr	r0, [pc, #4]	; (8006754 <__malloc_lock+0x8>)
 800674e:	f000 b811 	b.w	8006774 <__retarget_lock_acquire_recursive>
 8006752:	bf00      	nop
 8006754:	2000223c 	.word	0x2000223c

08006758 <__malloc_unlock>:
 8006758:	4801      	ldr	r0, [pc, #4]	; (8006760 <__malloc_unlock+0x8>)
 800675a:	f000 b80c 	b.w	8006776 <__retarget_lock_release_recursive>
 800675e:	bf00      	nop
 8006760:	2000223c 	.word	0x2000223c

08006764 <_malloc_usable_size_r>:
 8006764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006768:	1f18      	subs	r0, r3, #4
 800676a:	2b00      	cmp	r3, #0
 800676c:	bfbc      	itt	lt
 800676e:	580b      	ldrlt	r3, [r1, r0]
 8006770:	18c0      	addlt	r0, r0, r3
 8006772:	4770      	bx	lr

08006774 <__retarget_lock_acquire_recursive>:
 8006774:	4770      	bx	lr

08006776 <__retarget_lock_release_recursive>:
 8006776:	4770      	bx	lr

08006778 <_init>:
 8006778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677a:	bf00      	nop
 800677c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677e:	bc08      	pop	{r3}
 8006780:	469e      	mov	lr, r3
 8006782:	4770      	bx	lr

08006784 <_fini>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	bf00      	nop
 8006788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678a:	bc08      	pop	{r3}
 800678c:	469e      	mov	lr, r3
 800678e:	4770      	bx	lr
